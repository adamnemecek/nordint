{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"prelude":{"crate_id":{"name":"num_traits","disambiguator":[16142507818126799889,2699532617817281872]},"crate_root":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src","external_crates":[{"file_name":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","num":1,"id":{"name":"core","disambiguator":[13327666466629732949,9987446027624759907]}},{"file_name":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","num":2,"id":{"name":"compiler_builtins","disambiguator":[2015617368915733501,5085185978052605036]}},{"file_name":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","num":3,"id":{"name":"std","disambiguator":[12084876478865679224,6992091708407696395]}},{"file_name":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","num":4,"id":{"name":"alloc","disambiguator":[15432052054451265255,16180820044322852403]}},{"file_name":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","num":5,"id":{"name":"alloc_system","disambiguator":[2450213782871938554,6575915222664180146]}},{"file_name":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[7678227300669081252,15525753026815385261]}},{"file_name":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[3381403850232279812,2113732142059727742]}},{"file_name":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","num":8,"id":{"name":"alloc_jemalloc","disambiguator":[6252323365617669412,7645342072974104980]}},{"file_name":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","num":9,"id":{"name":"panic_unwind","disambiguator":[6217880106171425270,8630332162094579900]}}],"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":16436,"line_start":11,"line_end":473,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":434},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":928,"byte_end":935,"line_start":30,"line_end":30,"column_start":17,"column_end":24},"alias_span":null,"name":"Bounded","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":542},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":976,"byte_end":981,"line_start":32,"line_end":32,"column_start":16,"column_end":21},"alias_span":null,"name":"Float","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":2590},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":998,"byte_end":1008,"line_start":33,"line_end":33,"column_start":16,"column_end":26},"alias_span":null,"name":"FloatConst","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1123,"byte_end":1127,"line_start":35,"line_end":35,"column_start":22,"column_end":26},"alias_span":null,"name":"Zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1129,"byte_end":1132,"line_start":35,"line_end":35,"column_start":28,"column_end":31},"alias_span":null,"name":"One","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1134,"byte_end":1138,"line_start":35,"line_end":35,"column_start":33,"column_end":37},"alias_span":null,"name":"zero","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1140,"byte_end":1143,"line_start":35,"line_end":35,"column_start":39,"column_end":42},"alias_span":null,"name":"one","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":328},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1164,"byte_end":1167,"line_start":36,"line_end":36,"column_start":19,"column_end":22},"alias_span":null,"name":"Inv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1192,"byte_end":1202,"line_start":37,"line_end":37,"column_start":24,"column_end":34},"alias_span":null,"name":"CheckedAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1204,"byte_end":1214,"line_start":37,"line_end":37,"column_start":36,"column_end":46},"alias_span":null,"name":"CheckedSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1216,"byte_end":1226,"line_start":37,"line_end":37,"column_start":48,"column_end":58},"alias_span":null,"name":"CheckedMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":264},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1228,"byte_end":1238,"line_start":37,"line_end":37,"column_start":60,"column_end":70},"alias_span":null,"name":"CheckedDiv","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":268},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1263,"byte_end":1273,"line_start":38,"line_end":38,"column_start":24,"column_end":34},"alias_span":null,"name":"CheckedRem","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1275,"byte_end":1285,"line_start":38,"line_end":38,"column_start":36,"column_end":46},"alias_span":null,"name":"CheckedNeg","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":278},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1287,"byte_end":1297,"line_start":38,"line_end":38,"column_start":48,"column_end":58},"alias_span":null,"name":"CheckedShl","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1299,"byte_end":1309,"line_start":38,"line_end":38,"column_start":60,"column_end":70},"alias_span":null,"name":"CheckedShr","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":302},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1336,"byte_end":1347,"line_start":39,"line_end":39,"column_start":25,"column_end":36},"alias_span":null,"name":"WrappingAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":310},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1349,"byte_end":1360,"line_start":39,"line_end":39,"column_start":38,"column_end":49},"alias_span":null,"name":"WrappingMul","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":306},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1362,"byte_end":1373,"line_start":39,"line_end":39,"column_start":51,"column_end":62},"alias_span":null,"name":"WrappingSub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":360},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1399,"byte_end":1405,"line_start":40,"line_end":40,"column_start":24,"column_end":30},"alias_span":null,"name":"MulAdd","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":366},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1407,"byte_end":1419,"line_start":40,"line_end":40,"column_start":32,"column_end":44},"alias_span":null,"name":"MulAddAssign","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":224},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1447,"byte_end":1457,"line_start":41,"line_end":41,"column_start":26,"column_end":36},"alias_span":null,"name":"Saturating","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1474,"byte_end":1480,"line_start":42,"line_end":42,"column_start":16,"column_end":22},"alias_span":null,"name":"Signed","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1482,"byte_end":1490,"line_start":42,"line_end":42,"column_start":24,"column_end":32},"alias_span":null,"name":"Unsigned","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":208},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1492,"byte_end":1495,"line_start":42,"line_end":42,"column_start":34,"column_end":37},"alias_span":null,"name":"abs","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":210},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1497,"byte_end":1504,"line_start":42,"line_end":42,"column_start":39,"column_end":46},"alias_span":null,"name":"abs_sub","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":212},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1506,"byte_end":1512,"line_start":42,"line_end":42,"column_start":48,"column_end":54},"alias_span":null,"name":"signum","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":922},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1530,"byte_end":1541,"line_start":43,"line_end":43,"column_start":16,"column_end":27},"alias_span":null,"name":"AsPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":870},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1543,"byte_end":1556,"line_start":43,"line_end":43,"column_start":29,"column_end":42},"alias_span":null,"name":"FromPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":820},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1558,"byte_end":1569,"line_start":43,"line_end":43,"column_start":44,"column_end":55},"alias_span":null,"name":"ToPrimitive","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":912},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1571,"byte_end":1578,"line_start":43,"line_end":43,"column_start":57,"column_end":64},"alias_span":null,"name":"NumCast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":910},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1580,"byte_end":1584,"line_start":43,"line_end":43,"column_start":66,"column_end":70},"alias_span":null,"name":"cast","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":956},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1600,"byte_end":1607,"line_start":44,"line_end":44,"column_start":14,"column_end":21},"alias_span":null,"name":"PrimInt","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1004},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1623,"byte_end":1626,"line_start":45,"line_end":45,"column_start":15,"column_end":18},"alias_span":null,"name":"Pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1016},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1628,"byte_end":1631,"line_start":45,"line_end":45,"column_start":20,"column_end":23},"alias_span":null,"name":"pow","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1018},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1633,"byte_end":1644,"line_start":45,"line_end":45,"column_start":25,"column_end":36},"alias_span":null,"name":"checked_pow","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":472,"byte_end":16436,"line_start":11,"line_end":473,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/lib.rs","parent":null,"children":[{"krate":0,"index":2},{"krate":0,"index":4},{"krate":0,"index":6},{"krate":0,"index":8},{"krate":0,"index":10},{"krate":0,"index":22},{"krate":0,"index":34},{"krate":0,"index":36},{"krate":0,"index":38},{"krate":0,"index":40},{"krate":0,"index":42},{"krate":0,"index":44},{"krate":0,"index":54},{"krate":0,"index":56},{"krate":0,"index":74},{"krate":0,"index":82},{"krate":0,"index":88},{"krate":0,"index":90},{"krate":0,"index":102},{"krate":0,"index":114},{"krate":0,"index":116},{"krate":0,"index":124},{"krate":0,"index":130},{"krate":0,"index":170},{"krate":0,"index":220},{"krate":0,"index":394},{"krate":0,"index":454},{"krate":0,"index":666},{"krate":0,"index":776},{"krate":0,"index":928},{"krate":0,"index":992},{"krate":0,"index":1022},{"krate":0,"index":1028},{"krate":0,"index":1030},{"krate":0,"index":1032},{"krate":0,"index":1034},{"krate":0,"index":1036},{"krate":0,"index":1038},{"krate":0,"index":1040},{"krate":0,"index":1042},{"krate":0,"index":1044},{"krate":0,"index":1046},{"krate":0,"index":1048},{"krate":0,"index":1050},{"krate":0,"index":1052},{"krate":0,"index":7218},{"krate":0,"index":7224},{"krate":0,"index":7230},{"krate":0,"index":7236},{"krate":0,"index":7242},{"krate":0,"index":7248},{"krate":0,"index":7254},{"krate":0,"index":7260},{"krate":0,"index":7266},{"krate":0,"index":7272},{"krate":0,"index":7278},{"krate":0,"index":7284},{"krate":0,"index":1054},{"krate":0,"index":7290},{"krate":0,"index":7292},{"krate":0,"index":7296},{"krate":0,"index":7298},{"krate":0,"index":1060},{"krate":0,"index":1064},{"krate":0,"index":7302},{"krate":0,"index":7316},{"krate":0,"index":1066}],"decl_id":null,"docs":" Numeric traits for generic mathematics","sig":null,"attributes":[{"value":"deny(unconditional_recursion)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":668,"byte_end":701,"line_start":19,"line_end":19,"column_start":1,"column_end":34}},{"value":"no_std","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":703,"byte_end":713,"line_start":21,"line_end":21,"column_start":1,"column_end":11}}]},{"kind":"Mod","id":{"krate":0,"index":130},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"identities","qualname":"::identities","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/identities.rs","parent":null,"children":[{"krate":0,"index":132},{"krate":0,"index":138},{"krate":0,"index":140},{"krate":0,"index":146},{"krate":0,"index":1068},{"krate":0,"index":1074},{"krate":0,"index":1080},{"krate":0,"index":1086},{"krate":0,"index":1092},{"krate":0,"index":1098},{"krate":0,"index":1104},{"krate":0,"index":1110},{"krate":0,"index":1116},{"krate":0,"index":1122},{"krate":0,"index":1128},{"krate":0,"index":1134},{"krate":0,"index":1140},{"krate":0,"index":1146},{"krate":0,"index":148},{"krate":0,"index":154},{"krate":0,"index":160},{"krate":0,"index":1152},{"krate":0,"index":1156},{"krate":0,"index":1160},{"krate":0,"index":1164},{"krate":0,"index":1168},{"krate":0,"index":1172},{"krate":0,"index":1176},{"krate":0,"index":1180},{"krate":0,"index":1184},{"krate":0,"index":1188},{"krate":0,"index":1192},{"krate":0,"index":1196},{"krate":0,"index":1200},{"krate":0,"index":1204},{"krate":0,"index":162},{"krate":0,"index":166},{"krate":0,"index":168}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":140},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":17812,"byte_end":17816,"line_start":5,"line_end":5,"column_start":11,"column_end":15},"name":"Zero","qualname":"::identities::Zero","value":"Zero: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":142},{"krate":0,"index":144}],"decl_id":null,"docs":" Defines an additive identity element for `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":142},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":18334,"byte_end":18338,"line_start":21,"line_end":21,"column_start":8,"column_end":12},"name":"zero","qualname":"::identities::Zero::zero","value":"fn () -> Self","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns the additive identity element of `Self`, `0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":144},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":18440,"byte_end":18447,"line_start":25,"line_end":25,"column_start":8,"column_end":15},"name":"is_zero","qualname":"::identities::Zero::is_zero","value":"fn (&self) -> bool","parent":{"krate":0,"index":140},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the additive identity.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":18423,"byte_end":18432,"line_start":24,"line_end":24,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":154},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":19315,"byte_end":19318,"line_start":69,"line_end":69,"column_start":11,"column_end":14},"name":"One","qualname":"::identities::One","value":"One: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":156},{"krate":0,"index":158}],"decl_id":null,"docs":" Defines a multiplicative identity element for `Self`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":156},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":19842,"byte_end":19845,"line_start":85,"line_end":85,"column_start":8,"column_end":11},"name":"one","qualname":"::identities::One::one","value":"fn () -> Self","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Returns the multiplicative identity element of `Self`, `1`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":158},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":20154,"byte_end":20160,"line_start":93,"line_end":93,"column_start":8,"column_end":14},"name":"is_one","qualname":"::identities::One::is_one","value":"fn (&self) -> bool","parent":{"krate":0,"index":154},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is equal to the multiplicative identity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":20137,"byte_end":20146,"line_start":92,"line_end":92,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":166},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":20988,"byte_end":20992,"line_start":135,"line_end":135,"column_start":26,"column_end":30},"name":"zero","qualname":"::identities::zero","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the additive identity, `0`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":20963,"byte_end":20980,"line_start":135,"line_end":135,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":168},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":21098,"byte_end":21101,"line_start":138,"line_end":138,"column_start":26,"column_end":29},"name":"one","qualname":"::identities::one","value":"fn <T> () -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the multiplicative identity, `1`.\n","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":21073,"byte_end":21090,"line_start":138,"line_end":138,"column_start":1,"column_end":18}}]},{"kind":"Mod","id":{"krate":0,"index":170},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"sign","qualname":"::sign","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/sign.rs","parent":null,"children":[{"krate":0,"index":172},{"krate":0,"index":174},{"krate":0,"index":176},{"krate":0,"index":178},{"krate":0,"index":180},{"krate":0,"index":192},{"krate":0,"index":1208},{"krate":0,"index":1220},{"krate":0,"index":1232},{"krate":0,"index":1244},{"krate":0,"index":1256},{"krate":0,"index":1268},{"krate":0,"index":194},{"krate":0,"index":206},{"krate":0,"index":1280},{"krate":0,"index":1292},{"krate":0,"index":208},{"krate":0,"index":210},{"krate":0,"index":212},{"krate":0,"index":214},{"krate":0,"index":216},{"krate":0,"index":1304},{"krate":0,"index":1306},{"krate":0,"index":1308},{"krate":0,"index":1310},{"krate":0,"index":1312},{"krate":0,"index":1314},{"krate":0,"index":218}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":180},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":22027,"byte_end":22033,"line_start":8,"line_end":8,"column_start":11,"column_end":17},"name":"Signed","qualname":"::sign::Signed","value":"Signed: Sized + Num + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":182},{"krate":0,"index":184},{"krate":0,"index":186},{"krate":0,"index":188},{"krate":0,"index":190}],"decl_id":null,"docs":" Useful functions for signed numbers (i.e. numbers that can be negative).\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":182},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":22286,"byte_end":22289,"line_start":14,"line_end":14,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::Signed::abs","value":"fn (&self) -> Self","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":184},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":22514,"byte_end":22521,"line_start":20,"line_end":20,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::Signed::abs_sub","value":"fn (&self, other: &Self) -> Self","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":186},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":22979,"byte_end":22985,"line_start":35,"line_end":35,"column_start":8,"column_end":14},"name":"signum","qualname":"::sign::Signed::signum","value":"fn (&self) -> Self","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":188},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":23102,"byte_end":23113,"line_start":38,"line_end":38,"column_start":8,"column_end":19},"name":"is_positive","qualname":"::sign::Signed::is_positive","value":"fn (&self) -> bool","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" Returns true if the number is positive and false if the number is zero or negative.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":190},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":23230,"byte_end":23241,"line_start":41,"line_end":41,"column_start":8,"column_end":19},"name":"is_negative","qualname":"::sign::Signed::is_negative","value":"fn (&self) -> bool","parent":{"krate":0,"index":180},"children":[],"decl_id":null,"docs":" Returns true if the number is negative and false if the number is zero or positive.\n","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":208},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":26275,"byte_end":26278,"line_start":151,"line_end":151,"column_start":8,"column_end":11},"name":"abs","qualname":"::sign::abs","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Computes the absolute value.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":26250,"byte_end":26267,"line_start":150,"line_end":150,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":210},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":26515,"byte_end":26522,"line_start":160,"line_end":160,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::sign::abs_sub","value":"fn <T> (x: T, y: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":26490,"byte_end":26507,"line_start":159,"line_end":159,"column_start":1,"column_end":18}}]},{"kind":"Function","id":{"krate":0,"index":212},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":26966,"byte_end":26972,"line_start":177,"line_end":177,"column_start":26,"column_end":32},"name":"signum","qualname":"::sign::signum","value":"fn <T> (value: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" Returns the sign of the number.","sig":null,"attributes":[{"value":"inline(always)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":26941,"byte_end":26958,"line_start":177,"line_end":177,"column_start":1,"column_end":18}}]},{"kind":"Trait","id":{"krate":0,"index":214},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":27077,"byte_end":27085,"line_start":180,"line_end":180,"column_start":11,"column_end":19},"name":"Unsigned","qualname":"::sign::Unsigned","value":"Unsigned: Num","parent":null,"children":[],"decl_id":null,"docs":" A trait for values which cannot be negative\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":220},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"ops","qualname":"::ops","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/ops/mod.rs","parent":null,"children":[{"krate":0,"index":222},{"krate":0,"index":232},{"krate":0,"index":288},{"krate":0,"index":326},{"krate":0,"index":358}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":222},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"saturating","qualname":"::ops::saturating","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/ops/saturating.rs","parent":null,"children":[{"krate":0,"index":224},{"krate":0,"index":230},{"krate":0,"index":1316},{"krate":0,"index":1322},{"krate":0,"index":1328},{"krate":0,"index":1334},{"krate":0,"index":1340},{"krate":0,"index":1346},{"krate":0,"index":1352},{"krate":0,"index":1358},{"krate":0,"index":1364},{"krate":0,"index":1370},{"krate":0,"index":1376},{"krate":0,"index":1382}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":224},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":27937,"byte_end":27947,"line_start":2,"line_end":2,"column_start":11,"column_end":21},"name":"Saturating","qualname":"::ops::saturating::Saturating","value":"Saturating","parent":null,"children":[{"krate":0,"index":226},{"krate":0,"index":228}],"decl_id":null,"docs":" Saturating math operations\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":226},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":28073,"byte_end":28087,"line_start":5,"line_end":5,"column_start":8,"column_end":22},"name":"saturating_add","qualname":"::ops::saturating::Saturating::saturating_add","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Saturating addition operator.\n Returns a+b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":228},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,115,97,116,117,114,97,116,105,110,103,46,114,115],"byte_start":28239,"byte_end":28253,"line_start":9,"line_end":9,"column_start":8,"column_end":22},"name":"saturating_sub","qualname":"::ops::saturating::Saturating::saturating_sub","value":"fn (self, v: Self) -> Self","parent":{"krate":0,"index":224},"children":[],"decl_id":null,"docs":" Saturating subtraction operator.\n Returns a-b, saturating at the numeric bounds instead of overflowing.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":232},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"checked","qualname":"::ops::checked","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/ops/checked.rs","parent":null,"children":[{"krate":0,"index":234},{"krate":0,"index":250},{"krate":0,"index":254},{"krate":0,"index":1388},{"krate":0,"index":1392},{"krate":0,"index":1396},{"krate":0,"index":1400},{"krate":0,"index":1404},{"krate":0,"index":1408},{"krate":0,"index":1412},{"krate":0,"index":1416},{"krate":0,"index":1420},{"krate":0,"index":1424},{"krate":0,"index":1428},{"krate":0,"index":1432},{"krate":0,"index":256},{"krate":0,"index":1436},{"krate":0,"index":1440},{"krate":0,"index":1444},{"krate":0,"index":1448},{"krate":0,"index":1452},{"krate":0,"index":1456},{"krate":0,"index":1460},{"krate":0,"index":1464},{"krate":0,"index":1468},{"krate":0,"index":1472},{"krate":0,"index":1476},{"krate":0,"index":1480},{"krate":0,"index":260},{"krate":0,"index":1484},{"krate":0,"index":1488},{"krate":0,"index":1492},{"krate":0,"index":1496},{"krate":0,"index":1500},{"krate":0,"index":1504},{"krate":0,"index":1508},{"krate":0,"index":1512},{"krate":0,"index":1516},{"krate":0,"index":1520},{"krate":0,"index":1524},{"krate":0,"index":1528},{"krate":0,"index":264},{"krate":0,"index":1532},{"krate":0,"index":1536},{"krate":0,"index":1540},{"krate":0,"index":1544},{"krate":0,"index":1548},{"krate":0,"index":1552},{"krate":0,"index":1556},{"krate":0,"index":1560},{"krate":0,"index":1564},{"krate":0,"index":1568},{"krate":0,"index":1572},{"krate":0,"index":1576},{"krate":0,"index":268},{"krate":0,"index":1580},{"krate":0,"index":1584},{"krate":0,"index":1588},{"krate":0,"index":1592},{"krate":0,"index":1596},{"krate":0,"index":1600},{"krate":0,"index":1604},{"krate":0,"index":1608},{"krate":0,"index":1612},{"krate":0,"index":1616},{"krate":0,"index":1620},{"krate":0,"index":1624},{"krate":0,"index":272},{"krate":0,"index":274},{"krate":0,"index":1628},{"krate":0,"index":1632},{"krate":0,"index":1636},{"krate":0,"index":1640},{"krate":0,"index":1644},{"krate":0,"index":1648},{"krate":0,"index":1652},{"krate":0,"index":1656},{"krate":0,"index":1660},{"krate":0,"index":1664},{"krate":0,"index":1668},{"krate":0,"index":1672},{"krate":0,"index":278},{"krate":0,"index":282},{"krate":0,"index":1676},{"krate":0,"index":1680},{"krate":0,"index":1684},{"krate":0,"index":1688},{"krate":0,"index":1692},{"krate":0,"index":1696},{"krate":0,"index":1700},{"krate":0,"index":1704},{"krate":0,"index":1708},{"krate":0,"index":1712},{"krate":0,"index":1716},{"krate":0,"index":1720},{"krate":0,"index":284},{"krate":0,"index":1724},{"krate":0,"index":1728},{"krate":0,"index":1732},{"krate":0,"index":1736},{"krate":0,"index":1740},{"krate":0,"index":1744},{"krate":0,"index":1748},{"krate":0,"index":1752},{"krate":0,"index":1756},{"krate":0,"index":1760},{"krate":0,"index":1764},{"krate":0,"index":1768}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":250},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":28974,"byte_end":28984,"line_start":5,"line_end":5,"column_start":11,"column_end":21},"name":"CheckedAdd","qualname":"::ops::checked::CheckedAdd","value":"CheckedAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":252}],"decl_id":null,"docs":" Performs addition that returns `None` instead of wrapping around on\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":252},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":29124,"byte_end":29135,"line_start":8,"line_end":8,"column_start":8,"column_end":19},"name":"checked_add","qualname":"::ops::checked::CheckedAdd::checked_add","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":250},"children":[],"decl_id":null,"docs":" Adds two numbers, checking for overflow. If overflow happens, `None` is\n returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":256},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":30112,"byte_end":30122,"line_start":39,"line_end":39,"column_start":11,"column_end":21},"name":"CheckedSub","qualname":"::ops::checked::CheckedSub","value":"CheckedSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":258}],"decl_id":null,"docs":" Performs subtraction that returns `None` instead of wrapping around on underflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":258},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":30269,"byte_end":30280,"line_start":42,"line_end":42,"column_start":8,"column_end":19},"name":"checked_sub","qualname":"::ops::checked::CheckedSub::checked_sub","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":256},"children":[],"decl_id":null,"docs":" Subtracts two numbers, checking for underflow. If underflow happens,\n `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":260},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":31013,"byte_end":31023,"line_start":63,"line_end":63,"column_start":11,"column_end":21},"name":"CheckedMul","qualname":"::ops::checked::CheckedMul","value":"CheckedMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":262}],"decl_id":null,"docs":" Performs multiplication that returns `None` instead of wrapping around on underflow or\n overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":262},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":31195,"byte_end":31206,"line_start":66,"line_end":66,"column_start":8,"column_end":19},"name":"checked_mul","qualname":"::ops::checked::CheckedMul::checked_mul","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":260},"children":[],"decl_id":null,"docs":" Multiplies two numbers, checking for underflow or overflow. If underflow\n or overflow happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":264},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":31979,"byte_end":31989,"line_start":87,"line_end":87,"column_start":11,"column_end":21},"name":"CheckedDiv","qualname":"::ops::checked::CheckedDiv","value":"CheckedDiv: Sized + Div<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":266}],"decl_id":null,"docs":" Performs division that returns `None` instead of panicking on division by zero and instead of\n wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":266},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":32167,"byte_end":32178,"line_start":90,"line_end":90,"column_start":8,"column_end":19},"name":"checked_div","qualname":"::ops::checked::CheckedDiv::checked_div","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":264},"children":[],"decl_id":null,"docs":" Divides two numbers, checking for underflow, overflow and division by\n zero. If any of that happens, `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":268},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":32964,"byte_end":32974,"line_start":111,"line_end":111,"column_start":11,"column_end":21},"name":"CheckedRem","qualname":"::ops::checked::CheckedRem","value":"CheckedRem: Sized + Rem<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":270}],"decl_id":null,"docs":" Performs an integral remainder that returns `None` instead of panicking on division by zero and\n instead of wrapping around on underflow and overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":270},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":33768,"byte_end":33779,"line_start":131,"line_end":131,"column_start":8,"column_end":19},"name":"checked_rem","qualname":"::ops::checked::CheckedRem::checked_rem","value":"fn (&self, v: &Self) -> Option<Self>","parent":{"krate":0,"index":268},"children":[],"decl_id":null,"docs":" Finds the remainder of dividing two numbers, checking for underflow, overflow and division\n by zero. If any of that happens, `None` is returned.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":274},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":34742,"byte_end":34752,"line_start":162,"line_end":162,"column_start":11,"column_end":21},"name":"CheckedNeg","qualname":"::ops::checked::CheckedNeg","value":"CheckedNeg: Sized","parent":null,"children":[{"krate":0,"index":276}],"decl_id":null,"docs":" Performs negation that returns `None` if the result can't be represented.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":276},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":35402,"byte_end":35413,"line_start":179,"line_end":179,"column_start":8,"column_end":19},"name":"checked_neg","qualname":"::ops::checked::CheckedNeg::checked_neg","value":"fn (&self) -> Option<Self>","parent":{"krate":0,"index":274},"children":[],"decl_id":null,"docs":" Negates a number, returning `None` for results that can't be represented, like signed `MIN`\n values that can't be positive, or non-zero unsigned values that can't be negative.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":278},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":36162,"byte_end":36172,"line_start":199,"line_end":199,"column_start":11,"column_end":21},"name":"CheckedShl","qualname":"::ops::checked::CheckedShl","value":"CheckedShl: Sized + Shl<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":280}],"decl_id":null,"docs":" Performs a left shift that returns `None` on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":280},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":36695,"byte_end":36706,"line_start":213,"line_end":213,"column_start":8,"column_end":19},"name":"checked_shl","qualname":"::ops::checked::CheckedShl::checked_shl","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":278},"children":[],"decl_id":null,"docs":" Shifts a number to the left, checking for overflow. If overflow happens,\n `None` is returned.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":284},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":37738,"byte_end":37748,"line_start":244,"line_end":244,"column_start":11,"column_end":21},"name":"CheckedShr","qualname":"::ops::checked::CheckedShr","value":"CheckedShr: Sized + Shr<u32, Output = Self>","parent":null,"children":[{"krate":0,"index":286}],"decl_id":null,"docs":" Performs a right shift that returns `None` on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":286},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":38271,"byte_end":38282,"line_start":258,"line_end":258,"column_start":8,"column_end":19},"name":"checked_shr","qualname":"::ops::checked::CheckedShr::checked_shr","value":"fn (&self, rhs: u32) -> Option<Self>","parent":{"krate":0,"index":284},"children":[],"decl_id":null,"docs":" Shifts a number to the left, checking for overflow. If overflow happens,\n `None` is returned.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":288},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"wrapping","qualname":"::ops::wrapping","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/ops/wrapping.rs","parent":null,"children":[{"krate":0,"index":290},{"krate":0,"index":298},{"krate":0,"index":300},{"krate":0,"index":302},{"krate":0,"index":1772},{"krate":0,"index":1776},{"krate":0,"index":1780},{"krate":0,"index":1784},{"krate":0,"index":1788},{"krate":0,"index":1792},{"krate":0,"index":1796},{"krate":0,"index":1800},{"krate":0,"index":1804},{"krate":0,"index":1808},{"krate":0,"index":1812},{"krate":0,"index":1816},{"krate":0,"index":306},{"krate":0,"index":1820},{"krate":0,"index":1824},{"krate":0,"index":1828},{"krate":0,"index":1832},{"krate":0,"index":1836},{"krate":0,"index":1840},{"krate":0,"index":1844},{"krate":0,"index":1848},{"krate":0,"index":1852},{"krate":0,"index":1856},{"krate":0,"index":1860},{"krate":0,"index":1864},{"krate":0,"index":310},{"krate":0,"index":1868},{"krate":0,"index":1872},{"krate":0,"index":1876},{"krate":0,"index":1880},{"krate":0,"index":1884},{"krate":0,"index":1888},{"krate":0,"index":1892},{"krate":0,"index":1896},{"krate":0,"index":1900},{"krate":0,"index":1904},{"krate":0,"index":1908},{"krate":0,"index":1912},{"krate":0,"index":314},{"krate":0,"index":318},{"krate":0,"index":322}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":302},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":39597,"byte_end":39608,"line_start":24,"line_end":24,"column_start":11,"column_end":22},"name":"WrappingAdd","qualname":"::ops::wrapping::WrappingAdd","value":"WrappingAdd: Sized + Add<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":304}],"decl_id":null,"docs":" Performs addition that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":304},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":39765,"byte_end":39777,"line_start":27,"line_end":27,"column_start":8,"column_end":20},"name":"wrapping_add","qualname":"::ops::wrapping::WrappingAdd::wrapping_add","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":302},"children":[],"decl_id":null,"docs":" Wrapping (modular) addition. Computes `self + other`, wrapping around at the boundary of\n the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":306},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":40489,"byte_end":40500,"line_start":47,"line_end":47,"column_start":11,"column_end":22},"name":"WrappingSub","qualname":"::ops::wrapping::WrappingSub","value":"WrappingSub: Sized + Sub<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":308}],"decl_id":null,"docs":" Performs subtraction that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":40660,"byte_end":40672,"line_start":50,"line_end":50,"column_start":8,"column_end":20},"name":"wrapping_sub","qualname":"::ops::wrapping::WrappingSub::wrapping_sub","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":306},"children":[],"decl_id":null,"docs":" Wrapping (modular) subtraction. Computes `self - other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":310},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":41387,"byte_end":41398,"line_start":70,"line_end":70,"column_start":11,"column_end":22},"name":"WrappingMul","qualname":"::ops::wrapping::WrappingMul","value":"WrappingMul: Sized + Mul<Self, Output = Self>","parent":null,"children":[{"krate":0,"index":312}],"decl_id":null,"docs":" Performs multiplication that wraps around on overflow.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":312},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":41561,"byte_end":41573,"line_start":73,"line_end":73,"column_start":8,"column_end":20},"name":"wrapping_mul","qualname":"::ops::wrapping::WrappingMul::wrapping_mul","value":"fn (&self, v: &Self) -> Self","parent":{"krate":0,"index":310},"children":[],"decl_id":null,"docs":" Wrapping (modular) multiplication. Computes `self * other`, wrapping around at the boundary\n of the type.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":326},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"inv","qualname":"::ops::inv","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/ops/inv.rs","parent":null,"children":[{"krate":0,"index":328},{"krate":0,"index":334},{"krate":0,"index":340},{"krate":0,"index":346},{"krate":0,"index":352}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":328},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":43988,"byte_end":43991,"line_start":2,"line_end":2,"column_start":11,"column_end":14},"name":"Inv","qualname":"::ops::inv::Inv","value":"Inv","parent":null,"children":[{"krate":0,"index":330},{"krate":0,"index":332}],"decl_id":null,"docs":" Unary operator for retrieving the multiplicative inverse, or reciprocal, of a value.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":330},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":44051,"byte_end":44057,"line_start":4,"line_end":4,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::inv::Inv::Output","value":"type Output;","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,105,110,118,46,114,115],"byte_start":44336,"byte_end":44339,"line_start":17,"line_end":17,"column_start":8,"column_end":11},"name":"inv","qualname":"::ops::inv::Inv::inv","value":"fn (self) -> Self::Output","parent":{"krate":0,"index":328},"children":[],"decl_id":null,"docs":" Returns the multiplicative inverse of `self`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":358},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"mul_add","qualname":"::ops::mul_add","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/ops/mul_add.rs","parent":null,"children":[{"krate":0,"index":360},{"krate":0,"index":366},{"krate":0,"index":370},{"krate":0,"index":376},{"krate":0,"index":382},{"krate":0,"index":1916},{"krate":0,"index":1922},{"krate":0,"index":1928},{"krate":0,"index":1934},{"krate":0,"index":1940},{"krate":0,"index":1946},{"krate":0,"index":1952},{"krate":0,"index":1958},{"krate":0,"index":1964},{"krate":0,"index":1970},{"krate":0,"index":1976},{"krate":0,"index":1982},{"krate":0,"index":384},{"krate":0,"index":388},{"krate":0,"index":392},{"krate":0,"index":1988},{"krate":0,"index":1992},{"krate":0,"index":1996},{"krate":0,"index":2000},{"krate":0,"index":2004},{"krate":0,"index":2008},{"krate":0,"index":2012},{"krate":0,"index":2016},{"krate":0,"index":2020},{"krate":0,"index":2024},{"krate":0,"index":2028},{"krate":0,"index":2032}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":360},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":45408,"byte_end":45414,"line_start":23,"line_end":23,"column_start":11,"column_end":17},"name":"MulAdd","qualname":"::ops::mul_add::MulAdd","value":"MulAdd<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":362},{"krate":0,"index":364}],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":362},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":45512,"byte_end":45518,"line_start":25,"line_end":25,"column_start":10,"column_end":16},"name":"Output","qualname":"::ops::mul_add::MulAdd::Output","value":"type Output;","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" The resulting type after applying the fused multiply-add.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":364},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":45579,"byte_end":45586,"line_start":28,"line_end":28,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::ops::mul_add::MulAdd::mul_add","value":"fn (self, a: A, b: B) -> Self::Output","parent":{"krate":0,"index":360},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":366},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":45684,"byte_end":45696,"line_start":32,"line_end":32,"column_start":11,"column_end":23},"name":"MulAddAssign","qualname":"::ops::mul_add::MulAddAssign","value":"MulAddAssign<A = Self, B = Self>","parent":null,"children":[{"krate":0,"index":368}],"decl_id":null,"docs":" The fused multiply-add assignment operation.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":368},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,117,108,95,97,100,100,46,114,115],"byte_start":45777,"byte_end":45791,"line_start":34,"line_end":34,"column_start":8,"column_end":22},"name":"mul_add_assign","qualname":"::ops::mul_add::MulAddAssign::mul_add_assign","value":"fn (&mut self, a: A, b: B) -> ()","parent":{"krate":0,"index":366},"children":[],"decl_id":null,"docs":" Performs the fused multiply-add operation.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":394},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"bounds","qualname":"::bounds","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/bounds.rs","parent":null,"children":[{"krate":0,"index":396},{"krate":0,"index":408},{"krate":0,"index":420},{"krate":0,"index":426},{"krate":0,"index":428},{"krate":0,"index":434},{"krate":0,"index":440},{"krate":0,"index":2036},{"krate":0,"index":2042},{"krate":0,"index":2048},{"krate":0,"index":2054},{"krate":0,"index":2060},{"krate":0,"index":2066},{"krate":0,"index":2072},{"krate":0,"index":2078},{"krate":0,"index":2084},{"krate":0,"index":2090},{"krate":0,"index":2096},{"krate":0,"index":2102},{"krate":0,"index":442},{"krate":0,"index":2108},{"krate":0,"index":448},{"krate":0,"index":450},{"krate":0,"index":452},{"krate":0,"index":2114},{"krate":0,"index":2120},{"krate":0,"index":2126},{"krate":0,"index":2132},{"krate":0,"index":2138},{"krate":0,"index":2144},{"krate":0,"index":2150},{"krate":0,"index":2156},{"krate":0,"index":2162},{"krate":0,"index":2168},{"krate":0,"index":2174},{"krate":0,"index":2180},{"krate":0,"index":2186},{"krate":0,"index":2192},{"krate":0,"index":2198},{"krate":0,"index":2204},{"krate":0,"index":2210},{"krate":0,"index":2216},{"krate":0,"index":2222},{"krate":0,"index":2228},{"krate":0,"index":2234},{"krate":0,"index":2240}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":434},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":48752,"byte_end":48759,"line_start":9,"line_end":9,"column_start":11,"column_end":18},"name":"Bounded","qualname":"::bounds::Bounded","value":"Bounded","parent":null,"children":[{"krate":0,"index":436},{"krate":0,"index":438}],"decl_id":null,"docs":" Numbers which have upper and lower bounds\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":436},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":48895,"byte_end":48904,"line_start":12,"line_end":12,"column_start":8,"column_end":17},"name":"min_value","qualname":"::bounds::Bounded::min_value","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" returns the smallest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":438},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":48989,"byte_end":48998,"line_start":14,"line_end":14,"column_start":8,"column_end":17},"name":"max_value","qualname":"::bounds::Bounded::max_value","value":"fn () -> Self","parent":{"krate":0,"index":434},"children":[],"decl_id":null,"docs":" returns the largest finite number this type can represent\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":454},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"float","qualname":"::float","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/float.rs","parent":null,"children":[{"krate":0,"index":456},{"krate":0,"index":458},{"krate":0,"index":460},{"krate":0,"index":462},{"krate":0,"index":464},{"krate":0,"index":466},{"krate":0,"index":474},{"krate":0,"index":534},{"krate":0,"index":538},{"krate":0,"index":542},{"krate":0,"index":658},{"krate":0,"index":660},{"krate":0,"index":662},{"krate":0,"index":2358},{"krate":0,"index":2474},{"krate":0,"index":664},{"krate":0,"index":2590},{"krate":0,"index":2624},{"krate":0,"index":2658}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":474},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52003,"byte_end":52012,"line_start":13,"line_end":13,"column_start":11,"column_end":20},"name":"FloatCore","qualname":"::float::FloatCore","value":"FloatCore: Num + NumCast + Neg<Output = Self> + PartialOrd + Copy","parent":null,"children":[{"krate":0,"index":476},{"krate":0,"index":478},{"krate":0,"index":480},{"krate":0,"index":482},{"krate":0,"index":484},{"krate":0,"index":486},{"krate":0,"index":488},{"krate":0,"index":490},{"krate":0,"index":492},{"krate":0,"index":494},{"krate":0,"index":496},{"krate":0,"index":498},{"krate":0,"index":500},{"krate":0,"index":502},{"krate":0,"index":504},{"krate":0,"index":506},{"krate":0,"index":508},{"krate":0,"index":510},{"krate":0,"index":512},{"krate":0,"index":514},{"krate":0,"index":516},{"krate":0,"index":518},{"krate":0,"index":520},{"krate":0,"index":522},{"krate":0,"index":524},{"krate":0,"index":526},{"krate":0,"index":528},{"krate":0,"index":530},{"krate":0,"index":532}],"decl_id":null,"docs":" Generic trait for floating point numbers that works with `no_std`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":476},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52409,"byte_end":52417,"line_start":29,"line_end":29,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::FloatCore::infinity","value":"fn () -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns positive infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":478},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52780,"byte_end":52792,"line_start":46,"line_end":46,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::FloatCore::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns negative infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":480},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":53102,"byte_end":53105,"line_start":63,"line_end":63,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::FloatCore::nan","value":"fn () -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns NaN.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":482},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":53521,"byte_end":53529,"line_start":82,"line_end":82,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::FloatCore::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":484},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":53908,"byte_end":53917,"line_start":99,"line_end":99,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::FloatCore::min_value","value":"fn () -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":486},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":54337,"byte_end":54355,"line_start":116,"line_end":116,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::FloatCore::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":488},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":54717,"byte_end":54724,"line_start":133,"line_end":133,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::FloatCore::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":490},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55102,"byte_end":55111,"line_start":150,"line_end":150,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::FloatCore::max_value","value":"fn () -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":492},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55561,"byte_end":55567,"line_start":170,"line_end":170,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::FloatCore::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns `true` if the number is NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":55544,"byte_end":55553,"line_start":169,"line_end":169,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":494},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":56144,"byte_end":56155,"line_start":194,"line_end":194,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::FloatCore::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns `true` if the number is infinite.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":56127,"byte_end":56136,"line_start":193,"line_end":193,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":496},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":56756,"byte_end":56765,"line_start":217,"line_end":217,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::FloatCore::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither infinite or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":56739,"byte_end":56748,"line_start":216,"line_end":216,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":498},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":57363,"byte_end":57372,"line_start":240,"line_end":240,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::FloatCore::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite, subnormal or NaN.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":57346,"byte_end":57355,"line_start":239,"line_end":239,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":500},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":58211,"byte_end":58219,"line_start":266,"line_end":266,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::FloatCore::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":502},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":58852,"byte_end":58857,"line_start":291,"line_end":291,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::FloatCore::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":58835,"byte_end":58844,"line_start":290,"line_end":290,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":504},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59703,"byte_end":59707,"line_start":325,"line_end":325,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::FloatCore::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":59686,"byte_end":59695,"line_start":324,"line_end":324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":506},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":60539,"byte_end":60544,"line_start":358,"line_end":358,"column_start":8,"column_end":13},"name":"round","qualname":"::float::FloatCore::round","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from `0.0`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":60522,"byte_end":60531,"line_start":357,"line_end":357,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":508},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":61635,"byte_end":61640,"line_start":402,"line_end":402,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::FloatCore::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":61618,"byte_end":61627,"line_start":401,"line_end":401,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":510},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":62361,"byte_end":62366,"line_start":434,"line_end":434,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::FloatCore::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":62344,"byte_end":62353,"line_start":433,"line_end":433,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":512},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":63071,"byte_end":63074,"line_start":463,"line_end":463,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::FloatCore::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `FloatCore::nan()` if the\n number is `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":63054,"byte_end":63063,"line_start":462,"line_end":462,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":514},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":63998,"byte_end":64004,"line_start":497,"line_end":497,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::FloatCore::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":63981,"byte_end":63990,"line_start":496,"line_end":496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":516},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":64866,"byte_end":64882,"line_start":530,"line_end":530,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::FloatCore::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0` and\n `FloatCore::infinity()`, and since Rust 1.20 also\n `FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":64849,"byte_end":64858,"line_start":529,"line_end":529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":518},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":65612,"byte_end":65628,"line_start":557,"line_end":557,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::FloatCore::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0` and\n `FloatCore::neg_infinity()`, and since Rust 1.20 also\n `-FloatCore::nan()`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":65595,"byte_end":65604,"line_start":556,"line_end":556,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":520},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":66261,"byte_end":66264,"line_start":582,"line_end":582,"column_start":8,"column_end":11},"name":"min","qualname":"::float::FloatCore::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":66244,"byte_end":66253,"line_start":581,"line_end":581,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":522},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":67021,"byte_end":67024,"line_start":612,"line_end":612,"column_start":8,"column_end":11},"name":"max","qualname":"::float::FloatCore::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":67004,"byte_end":67013,"line_start":611,"line_end":611,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":524},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":67739,"byte_end":67744,"line_start":641,"line_end":641,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::FloatCore::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the reciprocal (multiplicative inverse) of the number.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":67722,"byte_end":67731,"line_start":640,"line_end":640,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":526},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68338,"byte_end":68342,"line_start":665,"line_end":665,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::FloatCore::powi","value":"fn (mut self, mut exp: i32) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":68321,"byte_end":68330,"line_start":664,"line_end":664,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":528},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":69259,"byte_end":69269,"line_start":693,"line_end":693,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::FloatCore::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Converts to degrees, assuming the number is in radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":530},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":69765,"byte_end":69775,"line_start":712,"line_end":712,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::FloatCore::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Converts to radians, assuming the number is in degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":532},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":70534,"byte_end":70548,"line_start":735,"line_end":735,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::FloatCore::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":474},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":542},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75286,"byte_end":75291,"line_start":890,"line_end":890,"column_start":11,"column_end":16},"name":"Float","qualname":"::float::Float","value":"Float: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":544},{"krate":0,"index":546},{"krate":0,"index":548},{"krate":0,"index":550},{"krate":0,"index":552},{"krate":0,"index":554},{"krate":0,"index":556},{"krate":0,"index":558},{"krate":0,"index":560},{"krate":0,"index":562},{"krate":0,"index":564},{"krate":0,"index":566},{"krate":0,"index":568},{"krate":0,"index":570},{"krate":0,"index":572},{"krate":0,"index":574},{"krate":0,"index":576},{"krate":0,"index":578},{"krate":0,"index":580},{"krate":0,"index":582},{"krate":0,"index":584},{"krate":0,"index":586},{"krate":0,"index":588},{"krate":0,"index":590},{"krate":0,"index":592},{"krate":0,"index":594},{"krate":0,"index":596},{"krate":0,"index":598},{"krate":0,"index":600},{"krate":0,"index":602},{"krate":0,"index":604},{"krate":0,"index":606},{"krate":0,"index":608},{"krate":0,"index":610},{"krate":0,"index":612},{"krate":0,"index":614},{"krate":0,"index":616},{"krate":0,"index":618},{"krate":0,"index":620},{"krate":0,"index":622},{"krate":0,"index":624},{"krate":0,"index":626},{"krate":0,"index":628},{"krate":0,"index":630},{"krate":0,"index":632},{"krate":0,"index":634},{"krate":0,"index":636},{"krate":0,"index":638},{"krate":0,"index":640},{"krate":0,"index":642},{"krate":0,"index":644},{"krate":0,"index":646},{"krate":0,"index":648},{"krate":0,"index":650},{"krate":0,"index":652},{"krate":0,"index":654},{"krate":0,"index":656}],"decl_id":null,"docs":" Generic trait for floating point numbers","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75252,"byte_end":75275,"line_start":889,"line_end":889,"column_start":1,"column_end":24}}]},{"kind":"Method","id":{"krate":0,"index":544},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75558,"byte_end":75561,"line_start":906,"line_end":906,"column_start":8,"column_end":11},"name":"nan","qualname":"::float::Float::nan","value":"fn () -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the `NaN` value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":546},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75883,"byte_end":75891,"line_start":919,"line_end":919,"column_start":8,"column_end":16},"name":"infinity","qualname":"::float::Float::infinity","value":"fn () -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the infinite value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":548},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":76242,"byte_end":76254,"line_start":932,"line_end":932,"column_start":8,"column_end":20},"name":"neg_infinity","qualname":"::float::Float::neg_infinity","value":"fn () -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the negative infinite value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":550},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":76624,"byte_end":76632,"line_start":946,"line_end":946,"column_start":8,"column_end":16},"name":"neg_zero","qualname":"::float::Float::neg_zero","value":"fn () -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `-0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":552},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":76899,"byte_end":76908,"line_start":958,"line_end":958,"column_start":8,"column_end":17},"name":"min_value","qualname":"::float::Float::min_value","value":"fn () -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":554},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":77207,"byte_end":77225,"line_start":970,"line_end":970,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::float::Float::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":556},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":77602,"byte_end":77609,"line_start":987,"line_end":987,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::float::Float::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":558},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":77950,"byte_end":77959,"line_start":1000,"line_end":1000,"column_start":8,"column_end":17},"name":"max_value","qualname":"::float::Float::max_value","value":"fn () -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":560},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":78257,"byte_end":78263,"line_start":1014,"line_end":1014,"column_start":8,"column_end":14},"name":"is_nan","qualname":"::float::Float::is_nan","value":"fn (self) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `true` if this value is `NaN` and false otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":562},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":78801,"byte_end":78812,"line_start":1034,"line_end":1034,"column_start":8,"column_end":19},"name":"is_infinite","qualname":"::float::Float::is_infinite","value":"fn (self) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `true` if this value is positive infinity or negative infinity and\n false otherwise.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":564},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":79304,"byte_end":79313,"line_start":1053,"line_end":1053,"column_start":8,"column_end":17},"name":"is_finite","qualname":"::float::Float::is_finite","value":"fn (self) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `true` if this number is neither infinite nor `NaN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":566},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":80063,"byte_end":80072,"line_start":1077,"line_end":1077,"column_start":8,"column_end":17},"name":"is_normal","qualname":"::float::Float::is_normal","value":"fn (self) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `true` if the number is neither zero, infinite,\n [subnormal][subnormal], or `NaN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":80586,"byte_end":80594,"line_start":1094,"line_end":1094,"column_start":8,"column_end":16},"name":"classify","qualname":"::float::Float::classify","value":"fn (self) -> FpCategory","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the floating point category of the number. If only one property\n is going to be tested, it is generally faster to use the specific\n predicate instead.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":570},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":80886,"byte_end":80891,"line_start":1107,"line_end":1107,"column_start":8,"column_end":13},"name":"floor","qualname":"::float::Float::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":81179,"byte_end":81183,"line_start":1120,"line_end":1120,"column_start":8,"column_end":12},"name":"ceil","qualname":"::float::Float::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":574},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":81497,"byte_end":81502,"line_start":1134,"line_end":1134,"column_start":8,"column_end":13},"name":"round","qualname":"::float::Float::round","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from\n `0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":576},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":81766,"byte_end":81771,"line_start":1147,"line_end":1147,"column_start":8,"column_end":13},"name":"trunc","qualname":"::float::Float::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":578},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":82167,"byte_end":82172,"line_start":1162,"line_end":1162,"column_start":8,"column_end":13},"name":"fract","qualname":"::float::Float::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":580},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":82702,"byte_end":82705,"line_start":1182,"line_end":1182,"column_start":8,"column_end":11},"name":"abs","qualname":"::float::Float::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `Float::nan()` if the\n number is `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":582},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":83272,"byte_end":83278,"line_start":1201,"line_end":1201,"column_start":8,"column_end":14},"name":"signum","qualname":"::float::Float::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":584},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":83751,"byte_end":83767,"line_start":1219,"line_end":1219,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::float::Float::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0`,\n `Float::infinity()`, and since Rust 1.20 also `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":84236,"byte_end":84252,"line_start":1237,"line_end":1237,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::float::Float::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0`,\n `Float::neg_infinity()`, and since Rust 1.20 also `-Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":84864,"byte_end":84871,"line_start":1257,"line_end":1257,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::float::Float::mul_add","value":"fn (self, a: Self, b: Self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":85169,"byte_end":85174,"line_start":1268,"line_end":1268,"column_start":8,"column_end":13},"name":"recip","qualname":"::float::Float::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Take the reciprocal (inverse) of a number, `1/x`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":85511,"byte_end":85515,"line_start":1282,"line_end":1282,"column_start":8,"column_end":12},"name":"powi","qualname":"::float::Float::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":594},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":85794,"byte_end":85798,"line_start":1294,"line_end":1294,"column_start":8,"column_end":12},"name":"powf","qualname":"::float::Float::powf","value":"fn (self, n: Self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Raise a number to a floating point power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":596},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":86221,"byte_end":86225,"line_start":1311,"line_end":1311,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::float::Float::sqrt","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Take the square root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":598},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":86575,"byte_end":86578,"line_start":1327,"line_end":1327,"column_start":8,"column_end":11},"name":"exp","qualname":"::float::Float::exp","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `e^(self)`, (the exponential function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":86856,"byte_end":86860,"line_start":1341,"line_end":1341,"column_start":8,"column_end":12},"name":"exp2","qualname":"::float::Float::exp2","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `2^(self)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":602},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":87207,"byte_end":87209,"line_start":1357,"line_end":1357,"column_start":8,"column_end":10},"name":"ln","qualname":"::float::Float::ln","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the natural logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":604},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":87719,"byte_end":87722,"line_start":1376,"line_end":1376,"column_start":8,"column_end":11},"name":"log","qualname":"::float::Float::log","value":"fn (self, base: Self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the logarithm of the number with respect to an arbitrary base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":606},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":88044,"byte_end":88048,"line_start":1390,"line_end":1390,"column_start":8,"column_end":12},"name":"log2","qualname":"::float::Float::log2","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":608},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":88363,"byte_end":88368,"line_start":1404,"line_end":1404,"column_start":8,"column_end":13},"name":"log10","qualname":"::float::Float::log10","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":610},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":88667,"byte_end":88677,"line_start":1418,"line_end":1418,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::float::Float::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Converts radians to degrees.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":88650,"byte_end":88659,"line_start":1417,"line_end":1417,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":612},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":89108,"byte_end":89118,"line_start":1436,"line_end":1436,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::float::Float::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Converts degrees to radians.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":89091,"byte_end":89100,"line_start":1435,"line_end":1435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":614},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":89472,"byte_end":89475,"line_start":1452,"line_end":1452,"column_start":8,"column_end":11},"name":"max","qualname":"::float::Float::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":616},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":89714,"byte_end":89717,"line_start":1464,"line_end":1464,"column_start":8,"column_end":11},"name":"min","qualname":"::float::Float::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":618},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":90215,"byte_end":90222,"line_start":1483,"line_end":1483,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::float::Float::abs_sub","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":620},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":90530,"byte_end":90534,"line_start":1497,"line_end":1497,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::float::Float::cbrt","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Take the cubic root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":622},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":90952,"byte_end":90957,"line_start":1513,"line_end":1513,"column_start":8,"column_end":13},"name":"hypot","qualname":"::float::Float::hypot","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Calculate the length of the hypotenuse of a right-angle triangle given\n legs of length `x` and `y`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":624},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":91285,"byte_end":91288,"line_start":1527,"line_end":1527,"column_start":8,"column_end":11},"name":"sin","qualname":"::float::Float::sin","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Computes the sine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":626},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":91605,"byte_end":91608,"line_start":1541,"line_end":1541,"column_start":8,"column_end":11},"name":"cos","qualname":"::float::Float::cos","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Computes the cosine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":628},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":91918,"byte_end":91921,"line_start":1554,"line_end":1554,"column_start":8,"column_end":11},"name":"tan","qualname":"::float::Float::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Computes the tangent of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":630},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":92401,"byte_end":92405,"line_start":1571,"line_end":1571,"column_start":8,"column_end":12},"name":"asin","qualname":"::float::Float::asin","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Computes the arcsine of a number. Return value is in radians in\n the range [-pi/2, pi/2] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":632},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":92881,"byte_end":92885,"line_start":1588,"line_end":1588,"column_start":8,"column_end":12},"name":"acos","qualname":"::float::Float::acos","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Computes the arccosine of a number. Return value is in radians in\n the range [0, pi] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":634},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":93249,"byte_end":93253,"line_start":1603,"line_end":1603,"column_start":8,"column_end":12},"name":"atan","qualname":"::float::Float::atan","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Computes the arctangent of a number. Return value is in radians in the\n range [-pi/2, pi/2];","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":636},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":94134,"byte_end":94139,"line_start":1632,"line_end":1632,"column_start":8,"column_end":13},"name":"atan2","qualname":"::float::Float::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":638},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":94653,"byte_end":94660,"line_start":1650,"line_end":1650,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"::float::Float::sin_cos","value":"fn (self) -> (Self, Self)","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Simultaneously computes the sine and cosine of the number, `x`. Returns\n `(sin(x), cos(x))`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":640},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":95028,"byte_end":95034,"line_start":1665,"line_end":1665,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"::float::Float::exp_m1","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `e^(self) - 1` in a way that is accurate even if the\n number is close to zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":642},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":95461,"byte_end":95466,"line_start":1681,"line_end":1681,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"::float::Float::ln_1p","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns `ln(1+n)` (natural logarithm) more accurately than if\n the operations were performed separately.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":644},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":95886,"byte_end":95890,"line_start":1699,"line_end":1699,"column_start":8,"column_end":12},"name":"sinh","qualname":"::float::Float::sinh","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":646},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96326,"byte_end":96330,"line_start":1717,"line_end":1717,"column_start":8,"column_end":12},"name":"cosh","qualname":"::float::Float::cosh","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":648},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":96786,"byte_end":96790,"line_start":1735,"line_end":1735,"column_start":8,"column_end":12},"name":"tanh","qualname":"::float::Float::tanh","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":650},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":97085,"byte_end":97090,"line_start":1749,"line_end":1749,"column_start":8,"column_end":13},"name":"asinh","qualname":"::float::Float::asinh","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Inverse hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":652},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":97387,"byte_end":97392,"line_start":1763,"line_end":1763,"column_start":8,"column_end":13},"name":"acosh","qualname":"::float::Float::acosh","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Inverse hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":654},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":97723,"byte_end":97728,"line_start":1778,"line_end":1778,"column_start":8,"column_end":13},"name":"atanh","qualname":"::float::Float::atanh","value":"fn (self) -> Self","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Inverse hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":656},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":98421,"byte_end":98435,"line_start":1800,"line_end":1800,"column_start":8,"column_end":22},"name":"integer_decode","qualname":"::float::Float::integer_decode","value":"fn (self) -> (u64, i16, i8)","parent":{"krate":0,"index":542},"children":[],"decl_id":null,"docs":" Returns the mantissa, base 2 exponent, and sign as integers, respectively.\n The original number can be recovered by `sign * mantissa * 2 ^ exponent`.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":666},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"real","qualname":"::real","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/real.rs","parent":null,"children":[{"krate":0,"index":668},{"krate":0,"index":670},{"krate":0,"index":678},{"krate":0,"index":774}],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"cfg(feature = \"std\")","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1752,"byte_end":1775,"line_start":55,"line_end":55,"column_start":1,"column_end":24}}]},{"kind":"Trait","id":{"krate":0,"index":678},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":106050,"byte_end":106054,"line_start":15,"line_end":15,"column_start":11,"column_end":15},"name":"Real","qualname":"::real::Real","value":"Real: Num + Copy + NumCast + PartialOrd + Neg<Output = Self>","parent":null,"children":[{"krate":0,"index":680},{"krate":0,"index":682},{"krate":0,"index":684},{"krate":0,"index":686},{"krate":0,"index":688},{"krate":0,"index":690},{"krate":0,"index":692},{"krate":0,"index":694},{"krate":0,"index":696},{"krate":0,"index":698},{"krate":0,"index":700},{"krate":0,"index":702},{"krate":0,"index":704},{"krate":0,"index":706},{"krate":0,"index":708},{"krate":0,"index":710},{"krate":0,"index":712},{"krate":0,"index":714},{"krate":0,"index":716},{"krate":0,"index":718},{"krate":0,"index":720},{"krate":0,"index":722},{"krate":0,"index":724},{"krate":0,"index":726},{"krate":0,"index":728},{"krate":0,"index":730},{"krate":0,"index":732},{"krate":0,"index":734},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740},{"krate":0,"index":742},{"krate":0,"index":744},{"krate":0,"index":746},{"krate":0,"index":748},{"krate":0,"index":750},{"krate":0,"index":752},{"krate":0,"index":754},{"krate":0,"index":756},{"krate":0,"index":758},{"krate":0,"index":760},{"krate":0,"index":762},{"krate":0,"index":764},{"krate":0,"index":766},{"krate":0,"index":768},{"krate":0,"index":770},{"krate":0,"index":772}],"decl_id":null,"docs":" A trait for real number types that do not necessarily have\n floating-point-specific characteristics such as NaN and infinity.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":106392,"byte_end":106401,"line_start":32,"line_end":32,"column_start":8,"column_end":17},"name":"min_value","qualname":"::real::Real::min_value","value":"fn () -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the smallest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":682},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":106704,"byte_end":106722,"line_start":44,"line_end":44,"column_start":8,"column_end":26},"name":"min_positive_value","qualname":"::real::Real::min_positive_value","value":"fn () -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the smallest positive, normalized value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":684},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":107103,"byte_end":107110,"line_start":61,"line_end":61,"column_start":8,"column_end":15},"name":"epsilon","qualname":"::real::Real::epsilon","value":"fn () -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns epsilon, a small positive value.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":686},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":107372,"byte_end":107381,"line_start":72,"line_end":72,"column_start":8,"column_end":17},"name":"max_value","qualname":"::real::Real::max_value","value":"fn () -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the largest finite value that this type can represent.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":688},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":107668,"byte_end":107673,"line_start":85,"line_end":85,"column_start":8,"column_end":13},"name":"floor","qualname":"::real::Real::floor","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the largest integer less than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":690},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":107966,"byte_end":107970,"line_start":98,"line_end":98,"column_start":8,"column_end":12},"name":"ceil","qualname":"::real::Real::ceil","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the smallest integer greater than or equal to a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":692},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":108289,"byte_end":108294,"line_start":112,"line_end":112,"column_start":8,"column_end":13},"name":"round","qualname":"::real::Real::round","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the nearest integer to a number. Round half-way cases away from\n `0.0`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":694},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":108563,"byte_end":108568,"line_start":125,"line_end":125,"column_start":8,"column_end":13},"name":"trunc","qualname":"::real::Real::trunc","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Return the integer part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":696},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":108969,"byte_end":108974,"line_start":140,"line_end":140,"column_start":8,"column_end":13},"name":"fract","qualname":"::real::Real::fract","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the fractional part of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":698},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":109529,"byte_end":109532,"line_start":160,"line_end":160,"column_start":8,"column_end":11},"name":"abs","qualname":"::real::Real::abs","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the absolute value of `self`. Returns `Float::nan()` if the\n number is `Float::nan()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":700},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":110104,"byte_end":110110,"line_start":179,"line_end":179,"column_start":8,"column_end":14},"name":"signum","qualname":"::real::Real::signum","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns a number that represents the sign of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":702},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":110591,"byte_end":110607,"line_start":197,"line_end":197,"column_start":8,"column_end":24},"name":"is_sign_positive","qualname":"::real::Real::is_sign_positive","value":"fn (self) -> bool","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is positive, including `+0.0`,\n `Float::infinity()`, and with newer versions of Rust `f64::NAN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":704},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":111084,"byte_end":111100,"line_start":215,"line_end":215,"column_start":8,"column_end":24},"name":"is_sign_negative","qualname":"::real::Real::is_sign_negative","value":"fn (self) -> bool","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns `true` if `self` is negative, including `-0.0`,\n `Float::neg_infinity()`, and with newer versions of Rust `-f64::NAN`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":706},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":111717,"byte_end":111724,"line_start":235,"line_end":235,"column_start":8,"column_end":15},"name":"mul_add","qualname":"::real::Real::mul_add","value":"fn (self, a: Self, b: Self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Fused multiply-add. Computes `(self * a) + b` with only one rounding\n error, yielding a more accurate result than an unfused multiply-add.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":708},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":112028,"byte_end":112033,"line_start":247,"line_end":247,"column_start":8,"column_end":13},"name":"recip","qualname":"::real::Real::recip","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Take the reciprocal (inverse) of a number, `1/x`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":710},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":112375,"byte_end":112379,"line_start":261,"line_end":261,"column_start":8,"column_end":12},"name":"powi","qualname":"::real::Real::powi","value":"fn (self, n: i32) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Raise a number to an integer power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":712},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":112660,"byte_end":112664,"line_start":273,"line_end":273,"column_start":8,"column_end":12},"name":"powf","qualname":"::real::Real::powf","value":"fn (self, n: Self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Raise a number to a real number power.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":714},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":113256,"byte_end":113260,"line_start":294,"line_end":294,"column_start":8,"column_end":12},"name":"sqrt","qualname":"::real::Real::sqrt","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Take the square root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":716},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":113615,"byte_end":113618,"line_start":310,"line_end":310,"column_start":8,"column_end":11},"name":"exp","qualname":"::real::Real::exp","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns `e^(self)`, (the exponential function).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":718},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":113901,"byte_end":113905,"line_start":324,"line_end":324,"column_start":8,"column_end":12},"name":"exp2","qualname":"::real::Real::exp2","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns `2^(self)`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":720},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":114394,"byte_end":114396,"line_start":344,"line_end":344,"column_start":8,"column_end":10},"name":"ln","qualname":"::real::Real::ln","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the natural logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":722},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":115048,"byte_end":115051,"line_start":367,"line_end":367,"column_start":8,"column_end":11},"name":"log","qualname":"::real::Real::log","value":"fn (self, base: Self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the logarithm of the number with respect to an arbitrary base.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":724},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":115515,"byte_end":115519,"line_start":385,"line_end":385,"column_start":8,"column_end":12},"name":"log2","qualname":"::real::Real::log2","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the base 2 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":726},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":115984,"byte_end":115989,"line_start":404,"line_end":404,"column_start":8,"column_end":13},"name":"log10","qualname":"::real::Real::log10","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the base 10 logarithm of the number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":728},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":116274,"byte_end":116284,"line_start":417,"line_end":417,"column_start":8,"column_end":18},"name":"to_degrees","qualname":"::real::Real::to_degrees","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Converts radians to degrees.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":730},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":116573,"byte_end":116583,"line_start":430,"line_end":430,"column_start":8,"column_end":18},"name":"to_radians","qualname":"::real::Real::to_radians","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Converts degrees to radians.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":732},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":116814,"byte_end":116817,"line_start":442,"line_end":442,"column_start":8,"column_end":11},"name":"max","qualname":"::real::Real::max","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the maximum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":117061,"byte_end":117064,"line_start":454,"line_end":454,"column_start":8,"column_end":11},"name":"min","qualname":"::real::Real::min","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns the minimum of the two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":117567,"byte_end":117574,"line_start":473,"line_end":473,"column_start":8,"column_end":15},"name":"abs_sub","qualname":"::real::Real::abs_sub","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" The positive difference of two numbers.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":117887,"byte_end":117891,"line_start":487,"line_end":487,"column_start":8,"column_end":12},"name":"cbrt","qualname":"::real::Real::cbrt","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Take the cubic root of a number.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":118314,"byte_end":118319,"line_start":503,"line_end":503,"column_start":8,"column_end":13},"name":"hypot","qualname":"::real::Real::hypot","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Calculate the length of the hypotenuse of a right-angle triangle given\n legs of length `x` and `y`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":742},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":118652,"byte_end":118655,"line_start":517,"line_end":517,"column_start":8,"column_end":11},"name":"sin","qualname":"::real::Real::sin","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the sine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":744},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":118977,"byte_end":118980,"line_start":531,"line_end":531,"column_start":8,"column_end":11},"name":"cos","qualname":"::real::Real::cos","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the cosine of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":746},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":119295,"byte_end":119298,"line_start":544,"line_end":544,"column_start":8,"column_end":11},"name":"tan","qualname":"::real::Real::tan","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the tangent of a number (in radians).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":748},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":119955,"byte_end":119959,"line_start":566,"line_end":566,"column_start":8,"column_end":12},"name":"asin","qualname":"::real::Real::asin","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the arcsine of a number. Return value is in radians in\n the range [-pi/2, pi/2] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":750},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":120612,"byte_end":120616,"line_start":588,"line_end":588,"column_start":8,"column_end":12},"name":"acos","qualname":"::real::Real::acos","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the arccosine of a number. Return value is in radians in\n the range [0, pi] or NaN if the number is outside the range\n [-1, 1].","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":752},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":120985,"byte_end":120989,"line_start":603,"line_end":603,"column_start":8,"column_end":12},"name":"atan","qualname":"::real::Real::atan","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the arctangent of a number. Return value is in radians in the\n range [-pi/2, pi/2];","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":754},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":121875,"byte_end":121880,"line_start":632,"line_end":632,"column_start":8,"column_end":13},"name":"atan2","qualname":"::real::Real::atan2","value":"fn (self, other: Self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Computes the four quadrant arctangent of `self` (`y`) and `other` (`x`).","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":756},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":122399,"byte_end":122406,"line_start":650,"line_end":650,"column_start":8,"column_end":15},"name":"sin_cos","qualname":"::real::Real::sin_cos","value":"fn (self) -> (Self, Self)","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Simultaneously computes the sine and cosine of the number, `x`. Returns\n `(sin(x), cos(x))`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":758},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":122779,"byte_end":122785,"line_start":665,"line_end":665,"column_start":8,"column_end":14},"name":"exp_m1","qualname":"::real::Real::exp_m1","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns `e^(self) - 1` in a way that is accurate even if the\n number is close to zero.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":760},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":123363,"byte_end":123368,"line_start":686,"line_end":686,"column_start":8,"column_end":13},"name":"ln_1p","qualname":"::real::Real::ln_1p","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Returns `ln(1+n)` (natural logarithm) more accurately than if\n the operations were performed separately.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":762},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":123793,"byte_end":123797,"line_start":704,"line_end":704,"column_start":8,"column_end":12},"name":"sinh","qualname":"::real::Real::sinh","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":124238,"byte_end":124242,"line_start":722,"line_end":722,"column_start":8,"column_end":12},"name":"cosh","qualname":"::real::Real::cosh","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":766},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":124703,"byte_end":124707,"line_start":740,"line_end":740,"column_start":8,"column_end":12},"name":"tanh","qualname":"::real::Real::tanh","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":125007,"byte_end":125012,"line_start":754,"line_end":754,"column_start":8,"column_end":13},"name":"asinh","qualname":"::real::Real::asinh","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Inverse hyperbolic sine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":770},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":125314,"byte_end":125319,"line_start":768,"line_end":768,"column_start":8,"column_end":13},"name":"acosh","qualname":"::real::Real::acosh","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Inverse hyperbolic cosine function.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":772},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":125655,"byte_end":125660,"line_start":783,"line_end":783,"column_start":8,"column_end":13},"name":"atanh","qualname":"::real::Real::atanh","value":"fn (self) -> Self","parent":{"krate":0,"index":678},"children":[],"decl_id":null,"docs":" Inverse hyperbolic tangent function.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":776},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"cast","qualname":"::cast","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/cast.rs","parent":null,"children":[{"krate":0,"index":778},{"krate":0,"index":790},{"krate":0,"index":802},{"krate":0,"index":808},{"krate":0,"index":810},{"krate":0,"index":812},{"krate":0,"index":818},{"krate":0,"index":820},{"krate":0,"index":850},{"krate":0,"index":852},{"krate":0,"index":854},{"krate":0,"index":2786},{"krate":0,"index":2816},{"krate":0,"index":2846},{"krate":0,"index":2876},{"krate":0,"index":2906},{"krate":0,"index":2936},{"krate":0,"index":856},{"krate":0,"index":858},{"krate":0,"index":860},{"krate":0,"index":2966},{"krate":0,"index":2996},{"krate":0,"index":3026},{"krate":0,"index":3056},{"krate":0,"index":3086},{"krate":0,"index":3116},{"krate":0,"index":862},{"krate":0,"index":864},{"krate":0,"index":866},{"krate":0,"index":868},{"krate":0,"index":3146},{"krate":0,"index":3248},{"krate":0,"index":870},{"krate":0,"index":900},{"krate":0,"index":3350},{"krate":0,"index":3380},{"krate":0,"index":3410},{"krate":0,"index":3440},{"krate":0,"index":3470},{"krate":0,"index":3500},{"krate":0,"index":3530},{"krate":0,"index":3560},{"krate":0,"index":3590},{"krate":0,"index":3620},{"krate":0,"index":3650},{"krate":0,"index":3680},{"krate":0,"index":3710},{"krate":0,"index":3740},{"krate":0,"index":902},{"krate":0,"index":904},{"krate":0,"index":906},{"krate":0,"index":908},{"krate":0,"index":910},{"krate":0,"index":912},{"krate":0,"index":916},{"krate":0,"index":3826},{"krate":0,"index":3830},{"krate":0,"index":3834},{"krate":0,"index":3838},{"krate":0,"index":3842},{"krate":0,"index":3846},{"krate":0,"index":3850},{"krate":0,"index":3854},{"krate":0,"index":3858},{"krate":0,"index":3862},{"krate":0,"index":3866},{"krate":0,"index":3870},{"krate":0,"index":3874},{"krate":0,"index":3878},{"krate":0,"index":918},{"krate":0,"index":922},{"krate":0,"index":926},{"krate":0,"index":3882},{"krate":0,"index":3886},{"krate":0,"index":3890},{"krate":0,"index":3894},{"krate":0,"index":3898},{"krate":0,"index":3902},{"krate":0,"index":3906},{"krate":0,"index":3910},{"krate":0,"index":3914},{"krate":0,"index":3918},{"krate":0,"index":3922},{"krate":0,"index":3926},{"krate":0,"index":3930},{"krate":0,"index":3934},{"krate":0,"index":3938},{"krate":0,"index":3942},{"krate":0,"index":3946},{"krate":0,"index":3950},{"krate":0,"index":3954},{"krate":0,"index":3958},{"krate":0,"index":3962},{"krate":0,"index":3966},{"krate":0,"index":3970},{"krate":0,"index":3974},{"krate":0,"index":3978},{"krate":0,"index":3982},{"krate":0,"index":3986},{"krate":0,"index":3990},{"krate":0,"index":3994},{"krate":0,"index":3998},{"krate":0,"index":4002},{"krate":0,"index":4006},{"krate":0,"index":4010},{"krate":0,"index":4014},{"krate":0,"index":4018},{"krate":0,"index":4022},{"krate":0,"index":4026},{"krate":0,"index":4030},{"krate":0,"index":4034},{"krate":0,"index":4038},{"krate":0,"index":4042},{"krate":0,"index":4046},{"krate":0,"index":4050},{"krate":0,"index":4054},{"krate":0,"index":4058},{"krate":0,"index":4062},{"krate":0,"index":4066},{"krate":0,"index":4070},{"krate":0,"index":4074},{"krate":0,"index":4078},{"krate":0,"index":4082},{"krate":0,"index":4086},{"krate":0,"index":4090},{"krate":0,"index":4094},{"krate":0,"index":4098},{"krate":0,"index":4102},{"krate":0,"index":4106},{"krate":0,"index":4110},{"krate":0,"index":4114},{"krate":0,"index":4118},{"krate":0,"index":4122},{"krate":0,"index":4126},{"krate":0,"index":4130},{"krate":0,"index":4134},{"krate":0,"index":4138},{"krate":0,"index":4142},{"krate":0,"index":4146},{"krate":0,"index":4150},{"krate":0,"index":4154},{"krate":0,"index":4158},{"krate":0,"index":4162},{"krate":0,"index":4166},{"krate":0,"index":4170},{"krate":0,"index":4174},{"krate":0,"index":4178},{"krate":0,"index":4182},{"krate":0,"index":4186},{"krate":0,"index":4190},{"krate":0,"index":4194},{"krate":0,"index":4198},{"krate":0,"index":4202},{"krate":0,"index":4206},{"krate":0,"index":4210},{"krate":0,"index":4214},{"krate":0,"index":4218},{"krate":0,"index":4222},{"krate":0,"index":4226},{"krate":0,"index":4230},{"krate":0,"index":4234},{"krate":0,"index":4238},{"krate":0,"index":4242},{"krate":0,"index":4246},{"krate":0,"index":4250},{"krate":0,"index":4254},{"krate":0,"index":4258},{"krate":0,"index":4262},{"krate":0,"index":4266},{"krate":0,"index":4270},{"krate":0,"index":4274},{"krate":0,"index":4278},{"krate":0,"index":4282},{"krate":0,"index":4286},{"krate":0,"index":4290},{"krate":0,"index":4294},{"krate":0,"index":4298},{"krate":0,"index":4302},{"krate":0,"index":4306},{"krate":0,"index":4310},{"krate":0,"index":4314},{"krate":0,"index":4318},{"krate":0,"index":4322},{"krate":0,"index":4326},{"krate":0,"index":4330},{"krate":0,"index":4334},{"krate":0,"index":4338},{"krate":0,"index":4342},{"krate":0,"index":4346},{"krate":0,"index":4350},{"krate":0,"index":4354},{"krate":0,"index":4358},{"krate":0,"index":4362},{"krate":0,"index":4366},{"krate":0,"index":4370},{"krate":0,"index":4374},{"krate":0,"index":4378},{"krate":0,"index":4382},{"krate":0,"index":4386},{"krate":0,"index":4390},{"krate":0,"index":4394},{"krate":0,"index":4398},{"krate":0,"index":4402},{"krate":0,"index":4406},{"krate":0,"index":4410},{"krate":0,"index":4414},{"krate":0,"index":4418},{"krate":0,"index":4422},{"krate":0,"index":4426},{"krate":0,"index":4430},{"krate":0,"index":4434},{"krate":0,"index":4438},{"krate":0,"index":4442},{"krate":0,"index":4446},{"krate":0,"index":4450},{"krate":0,"index":4454},{"krate":0,"index":4458},{"krate":0,"index":4462},{"krate":0,"index":4466},{"krate":0,"index":4470},{"krate":0,"index":4474},{"krate":0,"index":4478},{"krate":0,"index":4482},{"krate":0,"index":4486},{"krate":0,"index":4490},{"krate":0,"index":4494},{"krate":0,"index":4498},{"krate":0,"index":4502},{"krate":0,"index":4506},{"krate":0,"index":4510},{"krate":0,"index":4514},{"krate":0,"index":4518},{"krate":0,"index":4522},{"krate":0,"index":4526},{"krate":0,"index":4530},{"krate":0,"index":4534},{"krate":0,"index":4538},{"krate":0,"index":4542},{"krate":0,"index":4546},{"krate":0,"index":4550},{"krate":0,"index":4554},{"krate":0,"index":4558},{"krate":0,"index":4562},{"krate":0,"index":4566},{"krate":0,"index":4570},{"krate":0,"index":4574},{"krate":0,"index":4578},{"krate":0,"index":4582},{"krate":0,"index":4586},{"krate":0,"index":4590},{"krate":0,"index":4594},{"krate":0,"index":4598},{"krate":0,"index":4602},{"krate":0,"index":4606},{"krate":0,"index":4610},{"krate":0,"index":4614},{"krate":0,"index":4618},{"krate":0,"index":4622},{"krate":0,"index":4626},{"krate":0,"index":4630},{"krate":0,"index":4634},{"krate":0,"index":4638},{"krate":0,"index":4642},{"krate":0,"index":4646},{"krate":0,"index":4650},{"krate":0,"index":4654},{"krate":0,"index":4658},{"krate":0,"index":4662},{"krate":0,"index":4666},{"krate":0,"index":4670},{"krate":0,"index":4674},{"krate":0,"index":4678},{"krate":0,"index":4682},{"krate":0,"index":4686},{"krate":0,"index":4690},{"krate":0,"index":4694},{"krate":0,"index":4698},{"krate":0,"index":4702},{"krate":0,"index":4706},{"krate":0,"index":4710},{"krate":0,"index":4714},{"krate":0,"index":4718},{"krate":0,"index":4722},{"krate":0,"index":4726},{"krate":0,"index":4730},{"krate":0,"index":4734},{"krate":0,"index":4738},{"krate":0,"index":4742},{"krate":0,"index":4746},{"krate":0,"index":4750},{"krate":0,"index":4754},{"krate":0,"index":4758},{"krate":0,"index":4762},{"krate":0,"index":4766}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":820},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":127857,"byte_end":127868,"line_start":12,"line_end":12,"column_start":11,"column_end":22},"name":"ToPrimitive","qualname":"::cast::ToPrimitive","value":"ToPrimitive","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":824},{"krate":0,"index":826},{"krate":0,"index":828},{"krate":0,"index":830},{"krate":0,"index":832},{"krate":0,"index":834},{"krate":0,"index":836},{"krate":0,"index":838},{"krate":0,"index":840},{"krate":0,"index":842},{"krate":0,"index":844},{"krate":0,"index":846},{"krate":0,"index":848}],"decl_id":null,"docs":" A generic trait for converting a value to a number.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":822},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":127944,"byte_end":127952,"line_start":15,"line_end":15,"column_start":8,"column_end":16},"name":"to_isize","qualname":"::cast::ToPrimitive::to_isize","value":"fn (&self) -> Option<isize>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `isize`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":127927,"byte_end":127936,"line_start":14,"line_end":14,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":824},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":128119,"byte_end":128124,"line_start":21,"line_end":21,"column_start":8,"column_end":13},"name":"to_i8","qualname":"::cast::ToPrimitive::to_i8","value":"fn (&self) -> Option<i8>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":128102,"byte_end":128111,"line_start":20,"line_end":20,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":826},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":128286,"byte_end":128292,"line_start":27,"line_end":27,"column_start":8,"column_end":14},"name":"to_i16","qualname":"::cast::ToPrimitive::to_i16","value":"fn (&self) -> Option<i16>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i16`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":128269,"byte_end":128278,"line_start":26,"line_end":26,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":828},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":128456,"byte_end":128462,"line_start":33,"line_end":33,"column_start":8,"column_end":14},"name":"to_i32","qualname":"::cast::ToPrimitive::to_i32","value":"fn (&self) -> Option<i32>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":128439,"byte_end":128448,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":830},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":128612,"byte_end":128618,"line_start":38,"line_end":38,"column_start":8,"column_end":14},"name":"to_i64","qualname":"::cast::ToPrimitive::to_i64","value":"fn (&self) -> Option<i64>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i64`.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":832},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129005,"byte_end":129012,"line_start":48,"line_end":48,"column_start":8,"column_end":15},"name":"to_i128","qualname":"::cast::ToPrimitive::to_i128","value":"fn (&self) -> Option<i128>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `i128`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":128967,"byte_end":128976,"line_start":46,"line_end":46,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":128981,"byte_end":128997,"line_start":47,"line_end":47,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":834},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129155,"byte_end":129163,"line_start":54,"line_end":54,"column_start":8,"column_end":16},"name":"to_usize","qualname":"::cast::ToPrimitive::to_usize","value":"fn (&self) -> Option<usize>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to a `usize`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129138,"byte_end":129147,"line_start":53,"line_end":53,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":836},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129330,"byte_end":129335,"line_start":60,"line_end":60,"column_start":8,"column_end":13},"name":"to_u8","qualname":"::cast::ToPrimitive::to_u8","value":"fn (&self) -> Option<u8>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u8`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129313,"byte_end":129322,"line_start":59,"line_end":59,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":838},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129497,"byte_end":129503,"line_start":66,"line_end":66,"column_start":8,"column_end":14},"name":"to_u16","qualname":"::cast::ToPrimitive::to_u16","value":"fn (&self) -> Option<u16>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u16`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129480,"byte_end":129489,"line_start":65,"line_end":65,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":840},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129667,"byte_end":129673,"line_start":72,"line_end":72,"column_start":8,"column_end":14},"name":"to_u32","qualname":"::cast::ToPrimitive::to_u32","value":"fn (&self) -> Option<u32>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129650,"byte_end":129659,"line_start":71,"line_end":71,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":842},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129837,"byte_end":129843,"line_start":78,"line_end":78,"column_start":8,"column_end":14},"name":"to_u64","qualname":"::cast::ToPrimitive::to_u64","value":"fn (&self) -> Option<u64>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":129820,"byte_end":129829,"line_start":77,"line_end":77,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":844},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":130230,"byte_end":130237,"line_start":88,"line_end":88,"column_start":8,"column_end":15},"name":"to_u128","qualname":"::cast::ToPrimitive::to_u128","value":"fn (&self) -> Option<u128>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `u128`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":130192,"byte_end":130201,"line_start":86,"line_end":86,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":130206,"byte_end":130222,"line_start":87,"line_end":87,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":846},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":130379,"byte_end":130385,"line_start":94,"line_end":94,"column_start":8,"column_end":14},"name":"to_f32","qualname":"::cast::ToPrimitive::to_f32","value":"fn (&self) -> Option<f32>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f32`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":130362,"byte_end":130371,"line_start":93,"line_end":93,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":848},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":130549,"byte_end":130555,"line_start":100,"line_end":100,"column_start":8,"column_end":14},"name":"to_f64","qualname":"::cast::ToPrimitive::to_f64","value":"fn (&self) -> Option<f64>","parent":{"krate":0,"index":820},"children":[],"decl_id":null,"docs":" Converts the value of `self` to an `f64`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":130532,"byte_end":130541,"line_start":99,"line_end":99,"column_start":5,"column_end":14}}]},{"kind":"Trait","id":{"krate":0,"index":870},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":138838,"byte_end":138851,"line_start":356,"line_end":356,"column_start":11,"column_end":24},"name":"FromPrimitive","qualname":"::cast::FromPrimitive","value":"FromPrimitive: Sized","parent":null,"children":[{"krate":0,"index":872},{"krate":0,"index":874},{"krate":0,"index":876},{"krate":0,"index":878},{"krate":0,"index":880},{"krate":0,"index":882},{"krate":0,"index":884},{"krate":0,"index":886},{"krate":0,"index":888},{"krate":0,"index":890},{"krate":0,"index":892},{"krate":0,"index":894},{"krate":0,"index":896},{"krate":0,"index":898}],"decl_id":null,"docs":" A generic trait for converting a number to a value.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":872},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":139034,"byte_end":139044,"line_start":360,"line_end":360,"column_start":8,"column_end":18},"name":"from_isize","qualname":"::cast::FromPrimitive::from_isize","value":"fn (n: isize) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `isize` to return an optional value of this type. If the\n value cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":139017,"byte_end":139026,"line_start":359,"line_end":359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":874},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":139302,"byte_end":139309,"line_start":367,"line_end":367,"column_start":8,"column_end":15},"name":"from_i8","qualname":"::cast::FromPrimitive::from_i8","value":"fn (n: i8) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `i8` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":139285,"byte_end":139294,"line_start":366,"line_end":366,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":876},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":139559,"byte_end":139567,"line_start":374,"line_end":374,"column_start":8,"column_end":16},"name":"from_i16","qualname":"::cast::FromPrimitive::from_i16","value":"fn (n: i16) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `i16` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":139542,"byte_end":139551,"line_start":373,"line_end":373,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":878},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":139818,"byte_end":139826,"line_start":381,"line_end":381,"column_start":8,"column_end":16},"name":"from_i32","qualname":"::cast::FromPrimitive::from_i32","value":"fn (n: i32) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `i32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":139801,"byte_end":139810,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":880},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":140063,"byte_end":140071,"line_start":387,"line_end":387,"column_start":8,"column_end":16},"name":"from_i64","qualname":"::cast::FromPrimitive::from_i64","value":"fn (n: i64) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `i64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":882},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":140561,"byte_end":140570,"line_start":398,"line_end":398,"column_start":8,"column_end":17},"name":"from_i128","qualname":"::cast::FromPrimitive::from_i128","value":"fn (n: i128) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `i128` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":140523,"byte_end":140532,"line_start":396,"line_end":396,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":140537,"byte_end":140553,"line_start":397,"line_end":397,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":884},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":140829,"byte_end":140839,"line_start":405,"line_end":405,"column_start":8,"column_end":18},"name":"from_usize","qualname":"::cast::FromPrimitive::from_usize","value":"fn (n: usize) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert a `usize` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":140812,"byte_end":140821,"line_start":404,"line_end":404,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":886},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":141097,"byte_end":141104,"line_start":412,"line_end":412,"column_start":8,"column_end":15},"name":"from_u8","qualname":"::cast::FromPrimitive::from_u8","value":"fn (n: u8) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `u8` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":141080,"byte_end":141089,"line_start":411,"line_end":411,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":888},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":141354,"byte_end":141362,"line_start":419,"line_end":419,"column_start":8,"column_end":16},"name":"from_u16","qualname":"::cast::FromPrimitive::from_u16","value":"fn (n: u16) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `u16` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":141337,"byte_end":141346,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":890},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":141613,"byte_end":141621,"line_start":426,"line_end":426,"column_start":8,"column_end":16},"name":"from_u32","qualname":"::cast::FromPrimitive::from_u32","value":"fn (n: u32) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `u32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":141596,"byte_end":141605,"line_start":425,"line_end":425,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":141858,"byte_end":141866,"line_start":432,"line_end":432,"column_start":8,"column_end":16},"name":"from_u64","qualname":"::cast::FromPrimitive::from_u64","value":"fn (n: u64) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `u64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":894},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":142356,"byte_end":142365,"line_start":443,"line_end":443,"column_start":8,"column_end":17},"name":"from_u128","qualname":"::cast::FromPrimitive::from_u128","value":"fn (n: u128) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert an `u128` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":142318,"byte_end":142327,"line_start":441,"line_end":441,"column_start":5,"column_end":14}},{"value":"cfg(has_i128)","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":142332,"byte_end":142348,"line_start":442,"line_end":442,"column_start":5,"column_end":21}}]},{"kind":"Method","id":{"krate":0,"index":896},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":142622,"byte_end":142630,"line_start":450,"line_end":450,"column_start":8,"column_end":16},"name":"from_f32","qualname":"::cast::FromPrimitive::from_f32","value":"fn (n: f32) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert a `f32` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":142605,"byte_end":142614,"line_start":449,"line_end":449,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":898},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":142880,"byte_end":142888,"line_start":457,"line_end":457,"column_start":8,"column_end":16},"name":"from_f64","qualname":"::cast::FromPrimitive::from_f64","value":"fn (n: f64) -> Option<Self>","parent":{"krate":0,"index":870},"children":[],"decl_id":null,"docs":" Convert a `f64` to return an optional value of this type. If the\n type cannot be represented by this value, then `None` is returned.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":142863,"byte_end":142872,"line_start":456,"line_end":456,"column_start":5,"column_end":14}}]},{"kind":"Function","id":{"krate":0,"index":910},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":146599,"byte_end":146603,"line_start":587,"line_end":587,"column_start":8,"column_end":12},"name":"cast","qualname":"::cast::cast","value":"fn <T, U> (n: T) -> Option<U>","parent":null,"children":[],"decl_id":null,"docs":" Cast from one machine scalar to another.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":146582,"byte_end":146591,"line_start":586,"line_end":586,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":912},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":146737,"byte_end":146744,"line_start":592,"line_end":592,"column_start":11,"column_end":18},"name":"NumCast","qualname":"::cast::NumCast","value":"NumCast: Sized + ToPrimitive","parent":null,"children":[{"krate":0,"index":914}],"decl_id":null,"docs":" An interface for casting between machine scalars.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":914},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":146895,"byte_end":146899,"line_start":595,"line_end":595,"column_start":8,"column_end":12},"name":"from","qualname":"::cast::NumCast::from","value":"fn <T> (n: T) -> Option<Self>","parent":{"krate":0,"index":912},"children":[],"decl_id":null,"docs":" Creates a number from another value that can be converted into\n a primitive via the `ToPrimitive` trait.\n","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":922},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":149062,"byte_end":149073,"line_start":670,"line_end":670,"column_start":11,"column_end":22},"name":"AsPrimitive","qualname":"::cast::AsPrimitive","value":"AsPrimitive<T>: 'static + Copy","parent":null,"children":[{"krate":0,"index":924}],"decl_id":null,"docs":" A generic interface for casting between machine scalars with the\n `as` operator, which admits narrowing and precision loss.\n Implementers of this trait AsPrimitive should behave like a primitive\n numeric type (e.g. a newtype around another primitive), and the\n intended conversion must never fail.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":924},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":149191,"byte_end":149194,"line_start":675,"line_end":675,"column_start":8,"column_end":11},"name":"as_","qualname":"::cast::AsPrimitive::as_","value":"fn (self) -> T","parent":{"krate":0,"index":922},"children":[],"decl_id":null,"docs":" Convert a value to another, using the `as` operator.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":928},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"int","qualname":"::int","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/int.rs","parent":null,"children":[{"krate":0,"index":930},{"krate":0,"index":944},{"krate":0,"index":950},{"krate":0,"index":952},{"krate":0,"index":954},{"krate":0,"index":956},{"krate":0,"index":990},{"krate":0,"index":4770},{"krate":0,"index":4804},{"krate":0,"index":4838},{"krate":0,"index":4872},{"krate":0,"index":4906},{"krate":0,"index":4940},{"krate":0,"index":4974},{"krate":0,"index":5008},{"krate":0,"index":5042},{"krate":0,"index":5076},{"krate":0,"index":5110},{"krate":0,"index":5144}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":956},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150738,"byte_end":150745,"line_start":8,"line_end":8,"column_start":11,"column_end":18},"name":"PrimInt","qualname":"::int::PrimInt","value":"PrimInt: Sized + Copy + Num + NumCast + Bounded + PartialOrd + Ord + Eq + Not<Output =\nSelf> + BitAnd<Output = Self> + BitOr<Output = Self> + BitXor<Output = Self> +\nShl<usize, Output = Self> + Shr<usize, Output = Self> + CheckedAdd<Output =\nSelf> + CheckedSub<Output = Self> + CheckedMul<Output = Self> +\nCheckedDiv<Output = Self> + Saturating","parent":null,"children":[{"krate":0,"index":958},{"krate":0,"index":960},{"krate":0,"index":962},{"krate":0,"index":964},{"krate":0,"index":966},{"krate":0,"index":968},{"krate":0,"index":970},{"krate":0,"index":972},{"krate":0,"index":974},{"krate":0,"index":976},{"krate":0,"index":978},{"krate":0,"index":980},{"krate":0,"index":982},{"krate":0,"index":984},{"krate":0,"index":986},{"krate":0,"index":988}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":958},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":151389,"byte_end":151399,"line_start":37,"line_end":37,"column_start":8,"column_end":18},"name":"count_ones","qualname":"::int::PrimInt::count_ones","value":"fn (self) -> u32","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Returns the number of ones in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":960},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":151676,"byte_end":151687,"line_start":50,"line_end":50,"column_start":8,"column_end":19},"name":"count_zeros","qualname":"::int::PrimInt::count_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Returns the number of zeros in the binary representation of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":962},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":151983,"byte_end":151996,"line_start":64,"line_end":64,"column_start":8,"column_end":21},"name":"leading_zeros","qualname":"::int::PrimInt::leading_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Returns the number of leading zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":964},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":152293,"byte_end":152307,"line_start":78,"line_end":78,"column_start":8,"column_end":22},"name":"trailing_zeros","qualname":"::int::PrimInt::trailing_zeros","value":"fn (self) -> u32","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Returns the number of trailing zeros in the binary representation\n of `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":966},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":152702,"byte_end":152713,"line_start":93,"line_end":93,"column_start":8,"column_end":19},"name":"rotate_left","qualname":"::int::PrimInt::rotate_left","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, wrapping\n the truncated bits to the end of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":968},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":153125,"byte_end":153137,"line_start":108,"line_end":108,"column_start":8,"column_end":20},"name":"rotate_right","qualname":"::int::PrimInt::rotate_right","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, wrapping\n the truncated bits to the beginning of the resulting integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":970},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":153580,"byte_end":153590,"line_start":125,"line_end":125,"column_start":8,"column_end":18},"name":"signed_shl","qualname":"::int::PrimInt::signed_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":972},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":154066,"byte_end":154076,"line_start":142,"line_end":142,"column_start":8,"column_end":18},"name":"signed_shr","qualname":"::int::PrimInt::signed_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, copying\n the \"sign bit\" in the most significant bits even for unsigned types.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":974},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":154523,"byte_end":154535,"line_start":159,"line_end":159,"column_start":8,"column_end":20},"name":"unsigned_shl","qualname":"::int::PrimInt::unsigned_shl","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Shifts the bits to the left by a specified amount amount, `n`, filling\n zeros in the least significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":976},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":154982,"byte_end":154994,"line_start":176,"line_end":176,"column_start":8,"column_end":20},"name":"unsigned_shr","qualname":"::int::PrimInt::unsigned_shr","value":"fn (self, n: u32) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Shifts the bits to the right by a specified amount amount, `n`, filling\n zeros in the most significant bits.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":978},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":155299,"byte_end":155309,"line_start":190,"line_end":190,"column_start":8,"column_end":18},"name":"swap_bytes","qualname":"::int::PrimInt::swap_bytes","value":"fn (self) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Reverses the byte order of the integer.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":155805,"byte_end":155812,"line_start":209,"line_end":209,"column_start":8,"column_end":15},"name":"from_be","qualname":"::int::PrimInt::from_be","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Convert an integer from big endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":982},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":156317,"byte_end":156324,"line_start":228,"line_end":228,"column_start":8,"column_end":15},"name":"from_le","qualname":"::int::PrimInt::from_le","value":"fn (x: Self) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Convert an integer from little endian to the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":156807,"byte_end":156812,"line_start":247,"line_end":247,"column_start":8,"column_end":13},"name":"to_be","qualname":"::int::PrimInt::to_be","value":"fn (self) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Convert `self` to big endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":986},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":157298,"byte_end":157303,"line_start":266,"line_end":266,"column_start":8,"column_end":13},"name":"to_le","qualname":"::int::PrimInt::to_le","value":"fn (self) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Convert `self` to little endian from the target's endianness.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":988},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":157541,"byte_end":157544,"line_start":277,"line_end":277,"column_start":8,"column_end":11},"name":"pow","qualname":"::int::PrimInt::pow","value":"fn (self, exp: u32) -> Self","parent":{"krate":0,"index":956},"children":[],"decl_id":null,"docs":" Raises self to the power of `exp`, using exponentiation by squaring.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":992},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":0,"byte_end":0,"line_start":1,"line_end":1,"column_start":1,"column_end":1},"name":"pow","qualname":"::pow","value":"/home/erik/.cargo/registry/src/github.com-1ecc6299db9ec823/num-traits-0.2.5/src/pow.rs","parent":null,"children":[{"krate":0,"index":994},{"krate":0,"index":996},{"krate":0,"index":998},{"krate":0,"index":1004},{"krate":0,"index":1010},{"krate":0,"index":5178},{"krate":0,"index":5184},{"krate":0,"index":5190},{"krate":0,"index":5196},{"krate":0,"index":5202},{"krate":0,"index":5208},{"krate":0,"index":5214},{"krate":0,"index":5220},{"krate":0,"index":5226},{"krate":0,"index":5232},{"krate":0,"index":5238},{"krate":0,"index":5244},{"krate":0,"index":5250},{"krate":0,"index":5256},{"krate":0,"index":5262},{"krate":0,"index":5268},{"krate":0,"index":5274},{"krate":0,"index":5280},{"krate":0,"index":5286},{"krate":0,"index":5292},{"krate":0,"index":5298},{"krate":0,"index":5304},{"krate":0,"index":5310},{"krate":0,"index":5316},{"krate":0,"index":5322},{"krate":0,"index":5328},{"krate":0,"index":5334},{"krate":0,"index":5340},{"krate":0,"index":5346},{"krate":0,"index":5352},{"krate":0,"index":5358},{"krate":0,"index":5364},{"krate":0,"index":5370},{"krate":0,"index":5376},{"krate":0,"index":5382},{"krate":0,"index":5388},{"krate":0,"index":5394},{"krate":0,"index":5400},{"krate":0,"index":5406},{"krate":0,"index":5412},{"krate":0,"index":5418},{"krate":0,"index":5424},{"krate":0,"index":5430},{"krate":0,"index":5436},{"krate":0,"index":5442},{"krate":0,"index":5448},{"krate":0,"index":5454},{"krate":0,"index":5460},{"krate":0,"index":5466},{"krate":0,"index":5472},{"krate":0,"index":5478},{"krate":0,"index":5484},{"krate":0,"index":5490},{"krate":0,"index":5496},{"krate":0,"index":5502},{"krate":0,"index":5508},{"krate":0,"index":5514},{"krate":0,"index":5520},{"krate":0,"index":5526},{"krate":0,"index":5532},{"krate":0,"index":5538},{"krate":0,"index":5544},{"krate":0,"index":5550},{"krate":0,"index":5556},{"krate":0,"index":5562},{"krate":0,"index":5568},{"krate":0,"index":5574},{"krate":0,"index":5580},{"krate":0,"index":5586},{"krate":0,"index":5592},{"krate":0,"index":5598},{"krate":0,"index":5604},{"krate":0,"index":5610},{"krate":0,"index":5616},{"krate":0,"index":5622},{"krate":0,"index":5628},{"krate":0,"index":5634},{"krate":0,"index":5640},{"krate":0,"index":5646},{"krate":0,"index":5652},{"krate":0,"index":5658},{"krate":0,"index":5664},{"krate":0,"index":5670},{"krate":0,"index":5676},{"krate":0,"index":5682},{"krate":0,"index":5688},{"krate":0,"index":5694},{"krate":0,"index":5700},{"krate":0,"index":5706},{"krate":0,"index":5712},{"krate":0,"index":5718},{"krate":0,"index":5724},{"krate":0,"index":5730},{"krate":0,"index":5736},{"krate":0,"index":5742},{"krate":0,"index":5748},{"krate":0,"index":5754},{"krate":0,"index":5760},{"krate":0,"index":5766},{"krate":0,"index":5772},{"krate":0,"index":5778},{"krate":0,"index":5784},{"krate":0,"index":5790},{"krate":0,"index":5796},{"krate":0,"index":5802},{"krate":0,"index":5808},{"krate":0,"index":5814},{"krate":0,"index":5820},{"krate":0,"index":5826},{"krate":0,"index":5832},{"krate":0,"index":5838},{"krate":0,"index":5844},{"krate":0,"index":5850},{"krate":0,"index":5856},{"krate":0,"index":5862},{"krate":0,"index":5868},{"krate":0,"index":5874},{"krate":0,"index":5880},{"krate":0,"index":5886},{"krate":0,"index":5892},{"krate":0,"index":5898},{"krate":0,"index":5904},{"krate":0,"index":5910},{"krate":0,"index":5916},{"krate":0,"index":5922},{"krate":0,"index":5928},{"krate":0,"index":5934},{"krate":0,"index":5940},{"krate":0,"index":5946},{"krate":0,"index":5952},{"krate":0,"index":5958},{"krate":0,"index":5964},{"krate":0,"index":5970},{"krate":0,"index":5976},{"krate":0,"index":5982},{"krate":0,"index":5988},{"krate":0,"index":5994},{"krate":0,"index":6000},{"krate":0,"index":6006},{"krate":0,"index":6012},{"krate":0,"index":6018},{"krate":0,"index":6024},{"krate":0,"index":6030},{"krate":0,"index":6036},{"krate":0,"index":6042},{"krate":0,"index":6048},{"krate":0,"index":6054},{"krate":0,"index":6060},{"krate":0,"index":6066},{"krate":0,"index":6072},{"krate":0,"index":6078},{"krate":0,"index":6084},{"krate":0,"index":6090},{"krate":0,"index":6096},{"krate":0,"index":6102},{"krate":0,"index":6108},{"krate":0,"index":6114},{"krate":0,"index":6120},{"krate":0,"index":6126},{"krate":0,"index":6132},{"krate":0,"index":6138},{"krate":0,"index":6144},{"krate":0,"index":6150},{"krate":0,"index":6156},{"krate":0,"index":6162},{"krate":0,"index":6168},{"krate":0,"index":6174},{"krate":0,"index":6180},{"krate":0,"index":6186},{"krate":0,"index":6192},{"krate":0,"index":6198},{"krate":0,"index":6204},{"krate":0,"index":6210},{"krate":0,"index":6216},{"krate":0,"index":6222},{"krate":0,"index":6228},{"krate":0,"index":6234},{"krate":0,"index":6240},{"krate":0,"index":6246},{"krate":0,"index":6252},{"krate":0,"index":6258},{"krate":0,"index":6264},{"krate":0,"index":6270},{"krate":0,"index":6276},{"krate":0,"index":6282},{"krate":0,"index":6288},{"krate":0,"index":6294},{"krate":0,"index":6300},{"krate":0,"index":6306},{"krate":0,"index":6312},{"krate":0,"index":6318},{"krate":0,"index":6324},{"krate":0,"index":6330},{"krate":0,"index":6336},{"krate":0,"index":6342},{"krate":0,"index":6348},{"krate":0,"index":6354},{"krate":0,"index":6360},{"krate":0,"index":6366},{"krate":0,"index":6372},{"krate":0,"index":6378},{"krate":0,"index":6384},{"krate":0,"index":6390},{"krate":0,"index":6396},{"krate":0,"index":6402},{"krate":0,"index":6408},{"krate":0,"index":6414},{"krate":0,"index":6420},{"krate":0,"index":6426},{"krate":0,"index":6432},{"krate":0,"index":6438},{"krate":0,"index":6444},{"krate":0,"index":6450},{"krate":0,"index":6456},{"krate":0,"index":6462},{"krate":0,"index":6468},{"krate":0,"index":6474},{"krate":0,"index":6480},{"krate":0,"index":6486},{"krate":0,"index":6492},{"krate":0,"index":6498},{"krate":0,"index":6504},{"krate":0,"index":6510},{"krate":0,"index":6516},{"krate":0,"index":6522},{"krate":0,"index":6528},{"krate":0,"index":6534},{"krate":0,"index":6540},{"krate":0,"index":6546},{"krate":0,"index":6552},{"krate":0,"index":6558},{"krate":0,"index":6564},{"krate":0,"index":6570},{"krate":0,"index":6576},{"krate":0,"index":6582},{"krate":0,"index":6588},{"krate":0,"index":6594},{"krate":0,"index":6600},{"krate":0,"index":6606},{"krate":0,"index":6612},{"krate":0,"index":6618},{"krate":0,"index":6624},{"krate":0,"index":6630},{"krate":0,"index":6636},{"krate":0,"index":6642},{"krate":0,"index":6648},{"krate":0,"index":6654},{"krate":0,"index":6660},{"krate":0,"index":6666},{"krate":0,"index":6672},{"krate":0,"index":6678},{"krate":0,"index":6684},{"krate":0,"index":6690},{"krate":0,"index":6696},{"krate":0,"index":6702},{"krate":0,"index":6708},{"krate":0,"index":6714},{"krate":0,"index":6720},{"krate":0,"index":6726},{"krate":0,"index":6732},{"krate":0,"index":6738},{"krate":0,"index":6744},{"krate":0,"index":6750},{"krate":0,"index":6756},{"krate":0,"index":6762},{"krate":0,"index":6768},{"krate":0,"index":6774},{"krate":0,"index":6780},{"krate":0,"index":6786},{"krate":0,"index":6792},{"krate":0,"index":6798},{"krate":0,"index":6804},{"krate":0,"index":6810},{"krate":0,"index":6816},{"krate":0,"index":6822},{"krate":0,"index":6828},{"krate":0,"index":6834},{"krate":0,"index":6840},{"krate":0,"index":6846},{"krate":0,"index":6852},{"krate":0,"index":6858},{"krate":0,"index":6864},{"krate":0,"index":6870},{"krate":0,"index":6876},{"krate":0,"index":6882},{"krate":0,"index":6888},{"krate":0,"index":6894},{"krate":0,"index":6900},{"krate":0,"index":1012},{"krate":0,"index":1016},{"krate":0,"index":1018}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1004},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":160259,"byte_end":160262,"line_start":6,"line_end":6,"column_start":11,"column_end":14},"name":"Pow","qualname":"::pow::Pow","value":"Pow<RHS>","parent":null,"children":[{"krate":0,"index":1006},{"krate":0,"index":1008}],"decl_id":null,"docs":" Binary operator for raising a value to a power.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1006},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":160327,"byte_end":160333,"line_start":8,"line_end":8,"column_start":10,"column_end":16},"name":"Output","qualname":"::pow::Pow::Output","value":"type Output;","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" The result after applying the operator.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":160522,"byte_end":160525,"line_start":18,"line_end":18,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::Pow::pow","value":"fn (self, rhs: RHS) -> Self::Output","parent":{"krate":0,"index":1004},"children":[],"decl_id":null,"docs":" Returns `self` to the power `rhs`.","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1016},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":165016,"byte_end":165019,"line_start":185,"line_end":185,"column_start":8,"column_end":11},"name":"pow","qualname":"::pow::pow","value":"fn <T> (mut base: T, mut exp: usize) -> T","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, using exponentiation by squaring.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":164999,"byte_end":165008,"line_start":184,"line_end":184,"column_start":1,"column_end":10}}]},{"kind":"Function","id":{"krate":0,"index":1018},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":165816,"byte_end":165827,"line_start":219,"line_end":219,"column_start":8,"column_end":19},"name":"checked_pow","qualname":"::pow::checked_pow","value":"fn <T> (mut base: T, mut exp: usize) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Raises a value to the power of exp, returning `None` if an overflow occurred.","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":165799,"byte_end":165808,"line_start":218,"line_end":218,"column_start":1,"column_end":10}}]},{"kind":"Trait","id":{"krate":0,"index":1022},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1974,"byte_end":1977,"line_start":63,"line_end":63,"column_start":11,"column_end":14},"name":"Num","qualname":"::Num","value":"Num: PartialEq + Zero + One + NumOps","parent":null,"children":[{"krate":0,"index":1024},{"krate":0,"index":1026}],"decl_id":null,"docs":" The base trait for numeric types, covering `0` and `1` values,\n comparisons, basic numeric operations, and string conversion.\n","sig":null,"attributes":[]},{"kind":"Type","id":{"krate":0,"index":1024},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2022,"byte_end":2037,"line_start":65,"line_end":65,"column_start":10,"column_end":25},"name":"FromStrRadixErr","qualname":"::Num::FromStrRadixErr","value":"type FromStrRadixErr;","parent":{"krate":0,"index":1022},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1026},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2395,"byte_end":2409,"line_start":80,"line_end":80,"column_start":8,"column_end":22},"name":"from_str_radix","qualname":"::Num::from_str_radix","value":"fn (str: &str, radix: u32) -> Result<Self, Self::FromStrRadixErr>","parent":{"krate":0,"index":1022},"children":[],"decl_id":null,"docs":" Convert from a string and radix <= 36.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1028},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2631,"byte_end":2637,"line_start":86,"line_end":86,"column_start":11,"column_end":17},"name":"NumOps","qualname":"::NumOps","value":"NumOps<Rhs = Self, Output = Self>: Add<Rhs, Output = Output> + Sub<Rhs, Output = Output> + Mul<Rhs, Output =\nOutput> + Div<Rhs, Output = Output> + Rem<Rhs, Output = Output>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing basic numeric operations","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1032},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3262,"byte_end":3268,"line_start":106,"line_end":106,"column_start":11,"column_end":17},"name":"NumRef","qualname":"::NumRef","value":"NumRef: Num + for<'r> NumOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement numeric operations taking\n the second operand by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1036},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3587,"byte_end":3593,"line_start":113,"line_end":113,"column_start":11,"column_end":17},"name":"RefNum","qualname":"::RefNum","value":"RefNum<Base>: NumOps<Base, Base> + for<'r> NumOps<&'r Base, Base>","parent":null,"children":[],"decl_id":null,"docs":" The trait for references which implement numeric operations, taking the\n second operand either by value or by reference.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1040},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3926,"byte_end":3938,"line_start":119,"line_end":119,"column_start":11,"column_end":23},"name":"NumAssignOps","qualname":"::NumAssignOps","value":"NumAssignOps<Rhs = Self>: AddAssign<Rhs> + SubAssign<Rhs> + MulAssign<Rhs> + DivAssign<Rhs> +\nRemAssign<Rhs>","parent":null,"children":[],"decl_id":null,"docs":" The trait for types implementing numeric assignment operators (like `+=`).","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1044},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4387,"byte_end":4396,"line_start":138,"line_end":138,"column_start":11,"column_end":20},"name":"NumAssign","qualname":"::NumAssign","value":"NumAssign: Num + NumAssignOps","parent":null,"children":[],"decl_id":null,"docs":" The trait for `Num` types which also implement assignment operators.","sig":null,"attributes":[]},{"kind":"Trait","id":{"krate":0,"index":1048},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4692,"byte_end":4704,"line_start":145,"line_end":145,"column_start":11,"column_end":23},"name":"NumAssignRef","qualname":"::NumAssignRef","value":"NumAssignRef: NumAssign + for<'r> NumAssignOps<&'r Self>","parent":null,"children":[],"decl_id":null,"docs":" The trait for `NumAssign` types which also implement assignment operations\n taking the second operand by reference.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1253},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5813,"byte_end":5818,"line_start":180,"line_end":180,"column_start":5,"column_end":10},"name":"Empty","qualname":"::FloatErrorKind::Empty","value":"FloatErrorKind::Empty","parent":{"krate":0,"index":7290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1255},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5824,"byte_end":5831,"line_start":181,"line_end":181,"column_start":5,"column_end":12},"name":"Invalid","qualname":"::FloatErrorKind::Invalid","value":"FloatErrorKind::Invalid","parent":{"krate":0,"index":7290},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":7290},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5792,"byte_end":5806,"line_start":179,"line_end":179,"column_start":10,"column_end":24},"name":"FloatErrorKind","qualname":"::FloatErrorKind","value":"FloatErrorKind::{Empty, Invalid}","parent":null,"children":[{"krate":0,"index":1253},{"krate":0,"index":1255}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":7296},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5989,"byte_end":6004,"line_start":186,"line_end":186,"column_start":12,"column_end":27},"name":"ParseFloatError","qualname":"::ParseFloatError","value":"ParseFloatError { kind }","parent":null,"children":[{"krate":0,"index":1257}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":1257},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6015,"byte_end":6019,"line_start":187,"line_end":187,"column_start":9,"column_end":13},"name":"kind","qualname":"::ParseFloatError::kind","value":"FloatErrorKind","parent":{"krate":0,"index":7296},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1066},"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14070,"byte_end":14075,"line_start":368,"line_end":368,"column_start":8,"column_end":13},"name":"clamp","qualname":"::clamp","value":"fn <T> (input: T, min: T, max: T) -> T","parent":null,"children":[],"decl_id":null,"docs":" A value bounded by a minimum and a maximum","sig":null,"attributes":[{"value":"inline","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":14053,"byte_end":14062,"line_start":367,"line_end":367,"column_start":1,"column_end":10}}]}],"impls":[{"id":14,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":19065,"byte_end":19073,"line_start":58,"line_end":58,"column_start":24,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":150},{"krate":0,"index":152}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":20743,"byte_end":20751,"line_start":126,"line_end":126,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":164}],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":24123,"byte_end":24131,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":196},{"krate":0,"index":198},{"krate":0,"index":200},{"krate":0,"index":202},{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":27347,"byte_end":27355,"line_start":192,"line_end":192,"column_start":32,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":190,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":42315,"byte_end":42323,"line_start":93,"line_end":93,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":316}],"docs":"","sig":null,"attributes":[]},{"id":191,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":42510,"byte_end":42518,"line_start":98,"line_end":98,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":320}],"docs":"","sig":null,"attributes":[]},{"id":192,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":42705,"byte_end":42713,"line_start":103,"line_end":103,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":324}],"docs":"","sig":null,"attributes":[]},{"id":235,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":49855,"byte_end":49863,"line_start":45,"line_end":45,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":444},{"krate":0,"index":446}],"docs":"","sig":null,"attributes":[]},{"id":240,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":125703,"byte_end":125704,"line_start":786,"line_end":786,"column_start":25,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":2692},{"krate":0,"index":2694},{"krate":0,"index":2696},{"krate":0,"index":2698},{"krate":0,"index":2700},{"krate":0,"index":2702},{"krate":0,"index":2704},{"krate":0,"index":2706},{"krate":0,"index":2708},{"krate":0,"index":2710},{"krate":0,"index":2712},{"krate":0,"index":2714},{"krate":0,"index":2716},{"krate":0,"index":2718},{"krate":0,"index":2720},{"krate":0,"index":2722},{"krate":0,"index":2724},{"krate":0,"index":2726},{"krate":0,"index":2728},{"krate":0,"index":2730},{"krate":0,"index":2732},{"krate":0,"index":2734},{"krate":0,"index":2736},{"krate":0,"index":2738},{"krate":0,"index":2740},{"krate":0,"index":2742},{"krate":0,"index":2744},{"krate":0,"index":2746},{"krate":0,"index":2748},{"krate":0,"index":2750},{"krate":0,"index":2752},{"krate":0,"index":2754},{"krate":0,"index":2756},{"krate":0,"index":2758},{"krate":0,"index":2760},{"krate":0,"index":2762},{"krate":0,"index":2764},{"krate":0,"index":2766},{"krate":0,"index":2768},{"krate":0,"index":2770},{"krate":0,"index":2772},{"krate":0,"index":2774},{"krate":0,"index":2776},{"krate":0,"index":2778},{"krate":0,"index":2780},{"krate":0,"index":2782},{"krate":0,"index":2784}],"docs":"","sig":null,"attributes":[]},{"id":255,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":145126,"byte_end":145134,"line_start":519,"line_end":519,"column_start":38,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":3770},{"krate":0,"index":3772},{"krate":0,"index":3774},{"krate":0,"index":3776},{"krate":0,"index":3778},{"krate":0,"index":3780},{"krate":0,"index":3782},{"krate":0,"index":3784},{"krate":0,"index":3786},{"krate":0,"index":3788},{"krate":0,"index":3790},{"krate":0,"index":3792},{"krate":0,"index":3794},{"krate":0,"index":3796}],"docs":"","sig":null,"attributes":[]},{"id":256,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":145902,"byte_end":145910,"line_start":552,"line_end":552,"column_start":42,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":3798},{"krate":0,"index":3800},{"krate":0,"index":3802},{"krate":0,"index":3804},{"krate":0,"index":3806},{"krate":0,"index":3808},{"krate":0,"index":3810},{"krate":0,"index":3812},{"krate":0,"index":3814},{"krate":0,"index":3816},{"krate":0,"index":3818},{"krate":0,"index":3820},{"krate":0,"index":3822},{"krate":0,"index":3824}],"docs":"","sig":null,"attributes":[]},{"id":271,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":147842,"byte_end":147850,"line_start":629,"line_end":629,"column_start":30,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":920}],"docs":"","sig":null,"attributes":[]},{"id":602,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163573,"byte_end":163581,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6332},{"krate":0,"index":6334}],"docs":"","sig":null,"attributes":[]},{"id":603,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163573,"byte_end":163581,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6338},{"krate":0,"index":6340}],"docs":"","sig":null,"attributes":[]},{"id":604,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163573,"byte_end":163581,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6356},{"krate":0,"index":6358}],"docs":"","sig":null,"attributes":[]},{"id":605,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163573,"byte_end":163581,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6362},{"krate":0,"index":6364}],"docs":"","sig":null,"attributes":[]},{"id":606,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163598,"byte_end":163606,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6380},{"krate":0,"index":6382}],"docs":"","sig":null,"attributes":[]},{"id":607,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163598,"byte_end":163606,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6386},{"krate":0,"index":6388}],"docs":"","sig":null,"attributes":[]},{"id":608,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163598,"byte_end":163606,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6404},{"krate":0,"index":6406}],"docs":"","sig":null,"attributes":[]},{"id":609,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163598,"byte_end":163606,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6410},{"krate":0,"index":6412}],"docs":"","sig":null,"attributes":[]},{"id":610,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163623,"byte_end":163631,"line_start":130,"line_end":130,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6428},{"krate":0,"index":6430}],"docs":"","sig":null,"attributes":[]},{"id":611,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163623,"byte_end":163631,"line_start":130,"line_end":130,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6434},{"krate":0,"index":6436}],"docs":"","sig":null,"attributes":[]},{"id":612,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163623,"byte_end":163631,"line_start":130,"line_end":130,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6452},{"krate":0,"index":6454}],"docs":"","sig":null,"attributes":[]},{"id":613,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163623,"byte_end":163631,"line_start":130,"line_end":130,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6458},{"krate":0,"index":6460}],"docs":"","sig":null,"attributes":[]},{"id":614,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163649,"byte_end":163657,"line_start":131,"line_end":131,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6476},{"krate":0,"index":6478}],"docs":"","sig":null,"attributes":[]},{"id":615,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163649,"byte_end":163657,"line_start":131,"line_end":131,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6482},{"krate":0,"index":6484}],"docs":"","sig":null,"attributes":[]},{"id":616,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163649,"byte_end":163657,"line_start":131,"line_end":131,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6500},{"krate":0,"index":6502}],"docs":"","sig":null,"attributes":[]},{"id":617,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163649,"byte_end":163657,"line_start":131,"line_end":131,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6506},{"krate":0,"index":6508}],"docs":"","sig":null,"attributes":[]},{"id":618,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163675,"byte_end":163683,"line_start":132,"line_end":132,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6524},{"krate":0,"index":6526}],"docs":"","sig":null,"attributes":[]},{"id":619,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163675,"byte_end":163683,"line_start":132,"line_end":132,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6530},{"krate":0,"index":6532}],"docs":"","sig":null,"attributes":[]},{"id":620,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163675,"byte_end":163683,"line_start":132,"line_end":132,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6548},{"krate":0,"index":6550}],"docs":"","sig":null,"attributes":[]},{"id":621,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163675,"byte_end":163683,"line_start":132,"line_end":132,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6554},{"krate":0,"index":6556}],"docs":"","sig":null,"attributes":[]},{"id":622,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163701,"byte_end":163709,"line_start":133,"line_end":133,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6572},{"krate":0,"index":6574}],"docs":"","sig":null,"attributes":[]},{"id":623,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163701,"byte_end":163709,"line_start":133,"line_end":133,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6578},{"krate":0,"index":6580}],"docs":"","sig":null,"attributes":[]},{"id":624,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163701,"byte_end":163709,"line_start":133,"line_end":133,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6596},{"krate":0,"index":6598}],"docs":"","sig":null,"attributes":[]},{"id":625,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163701,"byte_end":163709,"line_start":133,"line_end":133,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6602},{"krate":0,"index":6604}],"docs":"","sig":null,"attributes":[]},{"id":626,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163727,"byte_end":163735,"line_start":134,"line_end":134,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6620},{"krate":0,"index":6622}],"docs":"","sig":null,"attributes":[]},{"id":627,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163727,"byte_end":163735,"line_start":134,"line_end":134,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6626},{"krate":0,"index":6628}],"docs":"","sig":null,"attributes":[]},{"id":628,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163727,"byte_end":163735,"line_start":134,"line_end":134,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6644},{"krate":0,"index":6646}],"docs":"","sig":null,"attributes":[]},{"id":629,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163727,"byte_end":163735,"line_start":134,"line_end":134,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6650},{"krate":0,"index":6652}],"docs":"","sig":null,"attributes":[]},{"id":630,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163753,"byte_end":163761,"line_start":135,"line_end":135,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6668},{"krate":0,"index":6670}],"docs":"","sig":null,"attributes":[]},{"id":631,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163753,"byte_end":163761,"line_start":135,"line_end":135,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6674},{"krate":0,"index":6676}],"docs":"","sig":null,"attributes":[]},{"id":632,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163753,"byte_end":163761,"line_start":135,"line_end":135,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6692},{"krate":0,"index":6694}],"docs":"","sig":null,"attributes":[]},{"id":633,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163753,"byte_end":163761,"line_start":135,"line_end":135,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6698},{"krate":0,"index":6700}],"docs":"","sig":null,"attributes":[]},{"id":634,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163796,"byte_end":163804,"line_start":137,"line_end":137,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6716},{"krate":0,"index":6718}],"docs":"","sig":null,"attributes":[]},{"id":635,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163796,"byte_end":163804,"line_start":137,"line_end":137,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6722},{"krate":0,"index":6724}],"docs":"","sig":null,"attributes":[]},{"id":636,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163796,"byte_end":163804,"line_start":137,"line_end":137,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6740},{"krate":0,"index":6742}],"docs":"","sig":null,"attributes":[]},{"id":637,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163796,"byte_end":163804,"line_start":137,"line_end":137,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6746},{"krate":0,"index":6748}],"docs":"","sig":null,"attributes":[]},{"id":638,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163840,"byte_end":163848,"line_start":139,"line_end":139,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6764},{"krate":0,"index":6766}],"docs":"","sig":null,"attributes":[]},{"id":639,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163840,"byte_end":163848,"line_start":139,"line_end":139,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6770},{"krate":0,"index":6772}],"docs":"","sig":null,"attributes":[]},{"id":640,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163840,"byte_end":163848,"line_start":139,"line_end":139,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6788},{"krate":0,"index":6790}],"docs":"","sig":null,"attributes":[]},{"id":641,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163840,"byte_end":163848,"line_start":139,"line_end":139,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6794},{"krate":0,"index":6796}],"docs":"","sig":null,"attributes":[]},{"id":642,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163867,"byte_end":163875,"line_start":140,"line_end":140,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6812},{"krate":0,"index":6814}],"docs":"","sig":null,"attributes":[]},{"id":643,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163867,"byte_end":163875,"line_start":140,"line_end":140,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6818},{"krate":0,"index":6820}],"docs":"","sig":null,"attributes":[]},{"id":644,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163867,"byte_end":163875,"line_start":140,"line_end":140,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6836},{"krate":0,"index":6838}],"docs":"","sig":null,"attributes":[]},{"id":645,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163867,"byte_end":163875,"line_start":140,"line_end":140,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6842},{"krate":0,"index":6844}],"docs":"","sig":null,"attributes":[]},{"id":646,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163895,"byte_end":163903,"line_start":141,"line_end":141,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6860},{"krate":0,"index":6862}],"docs":"","sig":null,"attributes":[]},{"id":647,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163895,"byte_end":163903,"line_start":141,"line_end":141,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6866},{"krate":0,"index":6868}],"docs":"","sig":null,"attributes":[]},{"id":648,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163895,"byte_end":163903,"line_start":141,"line_end":141,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6884},{"krate":0,"index":6886}],"docs":"","sig":null,"attributes":[]},{"id":649,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163895,"byte_end":163903,"line_start":141,"line_end":141,"column_start":11,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":6890},{"krate":0,"index":6892}],"docs":"","sig":null,"attributes":[]},{"id":676,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2874,"byte_end":2875,"line_start":94,"line_end":94,"column_start":46,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":677,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3323,"byte_end":3324,"line_start":107,"line_end":107,"column_start":20,"column_end":21},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":678,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3687,"byte_end":3688,"line_start":114,"line_end":114,"column_start":32,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":679,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4095,"byte_end":4096,"line_start":127,"line_end":127,"column_start":36,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":680,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4442,"byte_end":4443,"line_start":139,"line_end":139,"column_start":23,"column_end":24},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":681,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4777,"byte_end":4778,"line_start":146,"line_end":146,"column_start":26,"column_end":27},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":694,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5378,"byte_end":5386,"line_start":166,"line_end":166,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1056},{"krate":0,"index":1058}],"docs":"","sig":null,"attributes":[]},{"id":695,"kind":"Direct","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6062,"byte_end":6077,"line_start":190,"line_end":190,"column_start":23,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":1062}],"docs":"","sig":null,"attributes":[]}],"refs":[{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1682,"byte_end":1692,"line_start":50,"line_end":50,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":130}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1702,"byte_end":1706,"line_start":51,"line_end":51,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":170}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1716,"byte_end":1719,"line_start":52,"line_end":52,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":220}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":27818,"byte_end":27828,"line_start":1,"line_end":1,"column_start":9,"column_end":19},"ref_id":{"krate":0,"index":222}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":27838,"byte_end":27845,"line_start":2,"line_end":2,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":232}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":27855,"byte_end":27863,"line_start":3,"line_end":3,"column_start":9,"column_end":17},"ref_id":{"krate":0,"index":288}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":27873,"byte_end":27876,"line_start":4,"line_end":4,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":326}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,109,111,100,46,114,115],"byte_start":27886,"byte_end":27893,"line_start":5,"line_end":5,"column_start":9,"column_end":16},"ref_id":{"krate":0,"index":358}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1729,"byte_end":1735,"line_start":53,"line_end":53,"column_start":9,"column_end":15},"ref_id":{"krate":0,"index":394}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1745,"byte_end":1750,"line_start":54,"line_end":54,"column_start":9,"column_end":14},"ref_id":{"krate":0,"index":454}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1784,"byte_end":1788,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":666}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1798,"byte_end":1802,"line_start":57,"line_end":57,"column_start":9,"column_end":13},"ref_id":{"krate":0,"index":776}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1812,"byte_end":1815,"line_start":58,"line_end":58,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":928}},{"kind":"Mod","span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1825,"byte_end":1828,"line_start":59,"line_end":59,"column_start":9,"column_end":12},"ref_id":{"krate":0,"index":992}}],"macro_refs":[],"relations":[{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":17818,"byte_end":17823,"line_start":5,"line_end":5,"column_start":17,"column_end":22},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":140}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":17826,"byte_end":17829,"line_start":5,"line_end":5,"column_start":25,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1776},"to":{"krate":0,"index":140}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":19065,"byte_end":19073,"line_start":58,"line_end":58,"column_start":24,"column_end":32},"kind":{"variant":"Impl","fields":[14]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":140}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":19320,"byte_end":19325,"line_start":69,"line_end":69,"column_start":16,"column_end":21},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":154}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":19328,"byte_end":19331,"line_start":69,"line_end":69,"column_start":24,"column_end":27},"kind":"SuperTrait","from":{"krate":1,"index":1792},"to":{"krate":0,"index":154}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,100,101,110,116,105,116,105,101,115,46,114,115],"byte_start":20743,"byte_end":20751,"line_start":126,"line_end":126,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[29]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":154}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":22035,"byte_end":22040,"line_start":8,"line_end":8,"column_start":19,"column_end":24},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":180}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":22043,"byte_end":22046,"line_start":8,"line_end":8,"column_start":27,"column_end":30},"kind":"SuperTrait","from":{"krate":0,"index":1022},"to":{"krate":0,"index":180}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":22049,"byte_end":22052,"line_start":8,"line_end":8,"column_start":33,"column_end":36},"kind":"SuperTrait","from":{"krate":1,"index":1820},"to":{"krate":0,"index":180}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":24123,"byte_end":24131,"line_start":80,"line_end":80,"column_start":28,"column_end":36},"kind":{"variant":"Impl","fields":[36]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":180}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":27087,"byte_end":27090,"line_start":180,"line_end":180,"column_start":21,"column_end":24},"kind":"SuperTrait","from":{"krate":0,"index":1022},"to":{"krate":0,"index":214}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,115,105,103,110,46,114,115],"byte_start":27347,"byte_end":27355,"line_start":192,"line_end":192,"column_start":32,"column_end":40},"kind":{"variant":"Impl","fields":[45]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":214}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":28986,"byte_end":28991,"line_start":5,"line_end":5,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":250}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":28994,"byte_end":28997,"line_start":5,"line_end":5,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1776},"to":{"krate":0,"index":250}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":30124,"byte_end":30129,"line_start":39,"line_end":39,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":256}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":30132,"byte_end":30135,"line_start":39,"line_end":39,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1784},"to":{"krate":0,"index":256}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":31025,"byte_end":31030,"line_start":63,"line_end":63,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":260}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":31033,"byte_end":31036,"line_start":63,"line_end":63,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1792},"to":{"krate":0,"index":260}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":31991,"byte_end":31996,"line_start":87,"line_end":87,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":264}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":31999,"byte_end":32002,"line_start":87,"line_end":87,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1800},"to":{"krate":0,"index":264}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":32976,"byte_end":32981,"line_start":111,"line_end":111,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":268}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":32984,"byte_end":32987,"line_start":111,"line_end":111,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1810},"to":{"krate":0,"index":268}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":34754,"byte_end":34759,"line_start":162,"line_end":162,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":274}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":36174,"byte_end":36179,"line_start":199,"line_end":199,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":278}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":36182,"byte_end":36185,"line_start":199,"line_end":199,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1896},"to":{"krate":0,"index":278}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":37750,"byte_end":37755,"line_start":244,"line_end":244,"column_start":23,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":284}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,99,104,101,99,107,101,100,46,114,115],"byte_start":37758,"byte_end":37761,"line_start":244,"line_end":244,"column_start":31,"column_end":34},"kind":"SuperTrait","from":{"krate":1,"index":1906},"to":{"krate":0,"index":284}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":39610,"byte_end":39615,"line_start":24,"line_end":24,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":302}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":39618,"byte_end":39621,"line_start":24,"line_end":24,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1776},"to":{"krate":0,"index":302}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":40502,"byte_end":40507,"line_start":47,"line_end":47,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":306}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":40510,"byte_end":40513,"line_start":47,"line_end":47,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1784},"to":{"krate":0,"index":306}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":41400,"byte_end":41405,"line_start":70,"line_end":70,"column_start":24,"column_end":29},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":310}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":41408,"byte_end":41411,"line_start":70,"line_end":70,"column_start":32,"column_end":35},"kind":"SuperTrait","from":{"krate":1,"index":1792},"to":{"krate":0,"index":310}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":42315,"byte_end":42323,"line_start":93,"line_end":93,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[190]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":302}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":42510,"byte_end":42518,"line_start":98,"line_end":98,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[191]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":306}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,111,112,115,47,119,114,97,112,112,105,110,103,46,114,115],"byte_start":42705,"byte_end":42713,"line_start":103,"line_end":103,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[192]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":310}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,98,111,117,110,100,115,46,114,115],"byte_start":49855,"byte_end":49863,"line_start":45,"line_end":45,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[235]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":434}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52014,"byte_end":52017,"line_start":13,"line_end":13,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1022},"to":{"krate":0,"index":474}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52020,"byte_end":52027,"line_start":13,"line_end":13,"column_start":28,"column_end":35},"kind":"SuperTrait","from":{"krate":0,"index":912},"to":{"krate":0,"index":474}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52030,"byte_end":52033,"line_start":13,"line_end":13,"column_start":38,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1820},"to":{"krate":0,"index":474}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52051,"byte_end":52061,"line_start":13,"line_end":13,"column_start":59,"column_end":69},"kind":"SuperTrait","from":{"krate":1,"index":2442},"to":{"krate":0,"index":474}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":52064,"byte_end":52068,"line_start":13,"line_end":13,"column_start":72,"column_end":76},"kind":"SuperTrait","from":{"krate":1,"index":1718},"to":{"krate":0,"index":474}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75298,"byte_end":75301,"line_start":891,"line_end":891,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1022},"to":{"krate":0,"index":542}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75308,"byte_end":75312,"line_start":892,"line_end":892,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":1718},"to":{"krate":0,"index":542}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75319,"byte_end":75326,"line_start":893,"line_end":893,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":912},"to":{"krate":0,"index":542}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75333,"byte_end":75343,"line_start":894,"line_end":894,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2442},"to":{"krate":0,"index":542}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,102,108,111,97,116,46,114,115],"byte_start":75350,"byte_end":75353,"line_start":895,"line_end":895,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1820},"to":{"krate":0,"index":542}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":106061,"byte_end":106064,"line_start":16,"line_end":16,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1022},"to":{"krate":0,"index":678}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":106071,"byte_end":106075,"line_start":17,"line_end":17,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":1718},"to":{"krate":0,"index":678}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":106082,"byte_end":106089,"line_start":18,"line_end":18,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":912},"to":{"krate":0,"index":678}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":106096,"byte_end":106106,"line_start":19,"line_end":19,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2442},"to":{"krate":0,"index":678}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":106113,"byte_end":106116,"line_start":20,"line_end":20,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1820},"to":{"krate":0,"index":678}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,114,101,97,108,46,114,115],"byte_start":125703,"byte_end":125704,"line_start":786,"line_end":786,"column_start":25,"column_end":26},"kind":{"variant":"Impl","fields":[240]},"from":{"krate":0,"index":57},"to":{"krate":0,"index":678}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":138853,"byte_end":138858,"line_start":356,"line_end":356,"column_start":26,"column_end":31},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":870}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":145126,"byte_end":145134,"line_start":519,"line_end":519,"column_start":38,"column_end":46},"kind":{"variant":"Impl","fields":[255]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":820}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":145902,"byte_end":145910,"line_start":552,"line_end":552,"column_start":42,"column_end":50},"kind":{"variant":"Impl","fields":[256]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":870}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":146746,"byte_end":146751,"line_start":592,"line_end":592,"column_start":20,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":912}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":146754,"byte_end":146765,"line_start":592,"line_end":592,"column_start":28,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":820},"to":{"krate":0,"index":912}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":147842,"byte_end":147850,"line_start":629,"line_end":629,"column_start":30,"column_end":38},"kind":{"variant":"Impl","fields":[271]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":912}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,99,97,115,116,46,114,115],"byte_start":149088,"byte_end":149092,"line_start":670,"line_end":670,"column_start":37,"column_end":41},"kind":"SuperTrait","from":{"krate":1,"index":1718},"to":{"krate":0,"index":922}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150752,"byte_end":150757,"line_start":9,"line_end":9,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":1714},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150764,"byte_end":150768,"line_start":10,"line_end":10,"column_start":7,"column_end":11},"kind":"SuperTrait","from":{"krate":1,"index":1718},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150775,"byte_end":150778,"line_start":11,"line_end":11,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":0,"index":1022},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150781,"byte_end":150788,"line_start":11,"line_end":11,"column_start":13,"column_end":20},"kind":"SuperTrait","from":{"krate":0,"index":912},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150795,"byte_end":150802,"line_start":12,"line_end":12,"column_start":7,"column_end":14},"kind":"SuperTrait","from":{"krate":0,"index":434},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150809,"byte_end":150819,"line_start":13,"line_end":13,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":1,"index":2442},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150822,"byte_end":150825,"line_start":13,"line_end":13,"column_start":20,"column_end":23},"kind":"SuperTrait","from":{"krate":1,"index":2424},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150828,"byte_end":150830,"line_start":13,"line_end":13,"column_start":26,"column_end":28},"kind":"SuperTrait","from":{"krate":1,"index":2394},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150837,"byte_end":150840,"line_start":14,"line_end":14,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1864},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150860,"byte_end":150866,"line_start":15,"line_end":15,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1872},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150886,"byte_end":150891,"line_start":16,"line_end":16,"column_start":7,"column_end":12},"kind":"SuperTrait","from":{"krate":1,"index":1880},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150911,"byte_end":150917,"line_start":17,"line_end":17,"column_start":7,"column_end":13},"kind":"SuperTrait","from":{"krate":1,"index":1888},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150937,"byte_end":150940,"line_start":18,"line_end":18,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1896},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150967,"byte_end":150970,"line_start":19,"line_end":19,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1906},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":150997,"byte_end":151007,"line_start":20,"line_end":20,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":250},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":151027,"byte_end":151037,"line_start":21,"line_end":21,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":256},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":151057,"byte_end":151067,"line_start":22,"line_end":22,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":260},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":151087,"byte_end":151097,"line_start":23,"line_end":23,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":264},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,105,110,116,46,114,115],"byte_start":151117,"byte_end":151127,"line_start":24,"line_end":24,"column_start":7,"column_end":17},"kind":"SuperTrait","from":{"krate":0,"index":224},"to":{"krate":0,"index":956}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163573,"byte_end":163581,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[602]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163573,"byte_end":163581,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[603]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163573,"byte_end":163581,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[604]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163573,"byte_end":163581,"line_start":128,"line_end":128,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[605]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163598,"byte_end":163606,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[606]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163598,"byte_end":163606,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[607]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163598,"byte_end":163606,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[608]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163598,"byte_end":163606,"line_start":129,"line_end":129,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[609]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163623,"byte_end":163631,"line_start":130,"line_end":130,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[610]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163623,"byte_end":163631,"line_start":130,"line_end":130,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[611]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163623,"byte_end":163631,"line_start":130,"line_end":130,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[612]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163623,"byte_end":163631,"line_start":130,"line_end":130,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[613]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163649,"byte_end":163657,"line_start":131,"line_end":131,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[614]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163649,"byte_end":163657,"line_start":131,"line_end":131,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[615]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163649,"byte_end":163657,"line_start":131,"line_end":131,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[616]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163649,"byte_end":163657,"line_start":131,"line_end":131,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[617]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163675,"byte_end":163683,"line_start":132,"line_end":132,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[618]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163675,"byte_end":163683,"line_start":132,"line_end":132,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[619]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163675,"byte_end":163683,"line_start":132,"line_end":132,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[620]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163675,"byte_end":163683,"line_start":132,"line_end":132,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[621]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163701,"byte_end":163709,"line_start":133,"line_end":133,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[622]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163701,"byte_end":163709,"line_start":133,"line_end":133,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[623]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163701,"byte_end":163709,"line_start":133,"line_end":133,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[624]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163701,"byte_end":163709,"line_start":133,"line_end":133,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[625]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163727,"byte_end":163735,"line_start":134,"line_end":134,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[626]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163727,"byte_end":163735,"line_start":134,"line_end":134,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[627]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163727,"byte_end":163735,"line_start":134,"line_end":134,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[628]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163727,"byte_end":163735,"line_start":134,"line_end":134,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[629]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163753,"byte_end":163761,"line_start":135,"line_end":135,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[630]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163753,"byte_end":163761,"line_start":135,"line_end":135,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[631]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163753,"byte_end":163761,"line_start":135,"line_end":135,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[632]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163753,"byte_end":163761,"line_start":135,"line_end":135,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[633]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163796,"byte_end":163804,"line_start":137,"line_end":137,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[634]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163796,"byte_end":163804,"line_start":137,"line_end":137,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[635]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163796,"byte_end":163804,"line_start":137,"line_end":137,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[636]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163796,"byte_end":163804,"line_start":137,"line_end":137,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[637]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163840,"byte_end":163848,"line_start":139,"line_end":139,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[638]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163840,"byte_end":163848,"line_start":139,"line_end":139,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[639]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163840,"byte_end":163848,"line_start":139,"line_end":139,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[640]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163840,"byte_end":163848,"line_start":139,"line_end":139,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[641]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163867,"byte_end":163875,"line_start":140,"line_end":140,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[642]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163867,"byte_end":163875,"line_start":140,"line_end":140,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[643]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163867,"byte_end":163875,"line_start":140,"line_end":140,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[644]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163867,"byte_end":163875,"line_start":140,"line_end":140,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[645]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163895,"byte_end":163903,"line_start":141,"line_end":141,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[646]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163895,"byte_end":163903,"line_start":141,"line_end":141,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[647]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163895,"byte_end":163903,"line_start":141,"line_end":141,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[648]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,112,111,119,46,114,115],"byte_start":163895,"byte_end":163903,"line_start":141,"line_end":141,"column_start":11,"column_end":19},"kind":{"variant":"Impl","fields":[649]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1004}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1979,"byte_end":1988,"line_start":63,"line_end":63,"column_start":16,"column_end":25},"kind":"SuperTrait","from":{"krate":1,"index":2388},"to":{"krate":0,"index":1022}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1991,"byte_end":1995,"line_start":63,"line_end":63,"column_start":28,"column_end":32},"kind":"SuperTrait","from":{"krate":0,"index":140},"to":{"krate":0,"index":1022}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":1998,"byte_end":2001,"line_start":63,"line_end":63,"column_start":35,"column_end":38},"kind":"SuperTrait","from":{"krate":0,"index":154},"to":{"krate":0,"index":1022}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2004,"byte_end":2010,"line_start":63,"line_end":63,"column_start":41,"column_end":47},"kind":"SuperTrait","from":{"krate":0,"index":1028},"to":{"krate":0,"index":1022}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2671,"byte_end":2674,"line_start":87,"line_end":87,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1776},"to":{"krate":0,"index":1028}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2703,"byte_end":2706,"line_start":88,"line_end":88,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1784},"to":{"krate":0,"index":1028}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2735,"byte_end":2738,"line_start":89,"line_end":89,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1792},"to":{"krate":0,"index":1028}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2767,"byte_end":2770,"line_start":90,"line_end":90,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1800},"to":{"krate":0,"index":1028}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2799,"byte_end":2802,"line_start":91,"line_end":91,"column_start":7,"column_end":10},"kind":"SuperTrait","from":{"krate":1,"index":1810},"to":{"krate":0,"index":1028}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":2874,"byte_end":2875,"line_start":94,"line_end":94,"column_start":46,"column_end":47},"kind":{"variant":"Impl","fields":[676]},"from":{"krate":0,"index":85},"to":{"krate":0,"index":1028}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3270,"byte_end":3273,"line_start":106,"line_end":106,"column_start":19,"column_end":22},"kind":"SuperTrait","from":{"krate":0,"index":1022},"to":{"krate":0,"index":1032}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3284,"byte_end":3290,"line_start":106,"line_end":106,"column_start":33,"column_end":39},"kind":"SuperTrait","from":{"krate":0,"index":1028},"to":{"krate":0,"index":1032}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3323,"byte_end":3324,"line_start":107,"line_end":107,"column_start":20,"column_end":21},"kind":{"variant":"Impl","fields":[677]},"from":{"krate":0,"index":93},"to":{"krate":0,"index":1032}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3601,"byte_end":3607,"line_start":113,"line_end":113,"column_start":25,"column_end":31},"kind":"SuperTrait","from":{"krate":0,"index":1028},"to":{"krate":0,"index":1036}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3630,"byte_end":3636,"line_start":113,"line_end":113,"column_start":54,"column_end":60},"kind":"SuperTrait","from":{"krate":0,"index":1028},"to":{"krate":0,"index":1036}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3687,"byte_end":3688,"line_start":114,"line_end":114,"column_start":32,"column_end":33},"kind":{"variant":"Impl","fields":[678]},"from":{"krate":0,"index":101},"to":{"krate":0,"index":1036}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3957,"byte_end":3966,"line_start":120,"line_end":120,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":1832},"to":{"krate":0,"index":1040}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3978,"byte_end":3987,"line_start":121,"line_end":121,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":1838},"to":{"krate":0,"index":1040}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":3999,"byte_end":4008,"line_start":122,"line_end":122,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":1844},"to":{"krate":0,"index":1040}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4020,"byte_end":4029,"line_start":123,"line_end":123,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":1850},"to":{"krate":0,"index":1040}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4041,"byte_end":4050,"line_start":124,"line_end":124,"column_start":7,"column_end":16},"kind":"SuperTrait","from":{"krate":1,"index":1856},"to":{"krate":0,"index":1040}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4095,"byte_end":4096,"line_start":127,"line_end":127,"column_start":36,"column_end":37},"kind":{"variant":"Impl","fields":[679]},"from":{"krate":0,"index":109},"to":{"krate":0,"index":1040}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4398,"byte_end":4401,"line_start":138,"line_end":138,"column_start":22,"column_end":25},"kind":"SuperTrait","from":{"krate":0,"index":1022},"to":{"krate":0,"index":1044}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4404,"byte_end":4416,"line_start":138,"line_end":138,"column_start":28,"column_end":40},"kind":"SuperTrait","from":{"krate":0,"index":1040},"to":{"krate":0,"index":1044}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4442,"byte_end":4443,"line_start":139,"line_end":139,"column_start":23,"column_end":24},"kind":{"variant":"Impl","fields":[680]},"from":{"krate":0,"index":113},"to":{"krate":0,"index":1044}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4706,"byte_end":4715,"line_start":145,"line_end":145,"column_start":25,"column_end":34},"kind":"SuperTrait","from":{"krate":0,"index":1044},"to":{"krate":0,"index":1048}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4726,"byte_end":4738,"line_start":145,"line_end":145,"column_start":45,"column_end":57},"kind":"SuperTrait","from":{"krate":0,"index":1040},"to":{"krate":0,"index":1048}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":4777,"byte_end":4778,"line_start":146,"line_end":146,"column_start":26,"column_end":27},"kind":{"variant":"Impl","fields":[681]},"from":{"krate":0,"index":117},"to":{"krate":0,"index":1048}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":5378,"byte_end":5386,"line_start":166,"line_end":166,"column_start":22,"column_end":30},"kind":{"variant":"Impl","fields":[694]},"from":{"krate":1,"index":12330},"to":{"krate":0,"index":1022}},{"span":{"file_name":[47,104,111,109,101,47,101,114,105,107,47,46,99,97,114,103,111,47,114,101,103,105,115,116,114,121,47,115,114,99,47,103,105,116,104,117,98,46,99,111,109,45,49,101,99,99,54,50,57,57,100,98,57,101,99,56,50,51,47,110,117,109,45,116,114,97,105,116,115,45,48,46,50,46,53,47,115,114,99,47,108,105,98,46,114,115],"byte_start":6062,"byte_end":6077,"line_start":190,"line_end":190,"column_start":23,"column_end":38},"kind":{"variant":"Impl","fields":[695]},"from":{"krate":0,"index":7296},"to":{"krate":1,"index":7792}}]}